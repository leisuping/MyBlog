<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用termux在安卓系统上搭建网站</title>
      <link href="/MyBlog/termux/"/>
      <url>/MyBlog/termux/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><blockquote><p>🎯 “Termux 是一款 Android 终端模拟器和 Linux 环境应用程序，无需 root 或设置即可直接运行。自动安装最小的基本系统，使用包管理器可以使用其他包。”<br>它就是一个普通的APP，可以在手机的应用商城下载安装，不需要任何配置，打开即用。</p></blockquote><h2 id="二、准备环境"><a href="#二、准备环境" class="headerlink" title="二、准备环境"></a>二、准备环境</h2><h3 id="1-安装-Termux"><a href="#1-安装-Termux" class="headerlink" title="1.安装 Termux"></a>1.安装 Termux</h3><blockquote><p>在手机的应用商城下载并安装，打开后是一个全屏的命令面板。<br>1.更新系统</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 连接远程仓库，获取软件包信息</span>$ <span class="token function">apt</span> update<span class="token comment"># 更新本地已经安装的软件包</span>$ <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2.测试系统</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 sl 软件包</span>$ <span class="token function">apt</span> <span class="token function">install</span> sl<span class="token comment"># 运行(正常会显示一个火车的命令行动画)</span>$ sl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3.访问本机存储</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 访问本机存储，手机会弹出对话框，询问是否允许 Termux 访问手机存储，点击"允许"。</span><span class="token comment"># 之后会在当前目录生成storage子目录，它是手机存储的符号链接，下载文件就是到这个目录去下载。</span>$ termux-setup-storage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Termux除了封装了apt命令，还封装了pkg一些基础命令，比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg search <span class="token operator">&lt;</span>query<span class="token operator">&gt;</span>              <span class="token comment"># 搜索包</span>pkg <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>           <span class="token comment"># 安装包</span>pkg uninstall <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>         <span class="token comment"># 卸载包</span>pkg reinstall <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>         <span class="token comment"># 重新安装包</span>pkg list-all                    <span class="token comment"># 列出可供安装的所有包</span>pkg list-installed              <span class="token comment"># 列出已经安装的包</span>pkg show <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>              <span class="token comment"># 显示某个包的详细信息</span>pkg files <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>             <span class="token comment"># 显示某个包的相关文件夹路径</span>pkg update                      <span class="token comment"># 更新源（自动切换源）</span>pkg upgrade                     <span class="token comment"># 升级软件包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4.安装nodejs</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt</span> <span class="token function">install</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(未完待续…)</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
          <category> termux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个nodejs版本切换</title>
      <link href="/MyBlog/nvm-change-node/"/>
      <url>/MyBlog/nvm-change-node/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引文"><a href="#一、引文" class="headerlink" title="一、引文"></a>一、引文</h2><blockquote><p>🎯 nodejs是前端开发必备的环境之一，但其版本迭代更新比较迅速(当前最新的版本21.1.0)<br>所以可能会碰到运行老项目，出现当前nodejs版本过高的情况。<br>为了兼容新老项目，保证其正常运行，通常我们都会在本地安装多个版本的nodejs。今天我们就来聊聊如何安装多个版本并切换吧~</p></blockquote><h3 id="需要用的管理工具nvm"><a href="#需要用的管理工具nvm" class="headerlink" title="需要用的管理工具nvm"></a>需要用的管理工具nvm</h3><blockquote><p>nvm 是一个简单的bash脚本，主要用它来管理系统中多个nodejs版本。<br>安装：github下载地址[<a href="https://github.com/coreybutler/nvm-windows/releases]">https://github.com/coreybutler/nvm-windows/releases]</a><br>windows 选择安装exe后缀的即可。（安装之后会自动配置环境信息）</p></blockquote><p><img src="./GitHub.png"></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">## 安装nvm后，可查看一下版本信息nvm -v## nvm管理node常用命令## 安装最新版$ nvm install stable## 安装指定版本的$ nvm install [版本号]## 切换到指定版本的nodenvm use [版本号]## 设置默认版本nvm alias default [版本号]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./nvmlist.png"><br><img src="./nvmuse.png"><br><img src="./nvm.png"></p><h2 id="二、具体操作"><a href="#二、具体操作" class="headerlink" title="二、具体操作"></a>二、具体操作</h2><h3 id="1-Windows系统"><a href="#1-Windows系统" class="headerlink" title="1.Windows系统"></a>1.Windows系统</h3><h4 id="安装指定的nodejs版本并切换版本"><a href="#安装指定的nodejs版本并切换版本" class="headerlink" title="安装指定的nodejs版本并切换版本"></a>安装指定的nodejs版本并切换版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 查看nodejs版本</span>$ nvm list available<span class="token comment">## 安装nodejs(我这里安装的是长期维护版本)</span>$ nvm <span class="token function">install</span> <span class="token number">18.18</span>.0<span class="token comment">## 查看已安装的nodejs版本</span>$ nvm list<span class="token comment">## 切换nodejs版本</span>$ nvm use <span class="token number">18.18</span>.0<span class="token comment">## 查看nodejs版本</span>$ node -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-MAC系统"><a href="#2-MAC系统" class="headerlink" title="2.MAC系统"></a>2.MAC系统</h3><h4 id="管理工具，可以是nvm或者n"><a href="#管理工具，可以是nvm或者n" class="headerlink" title="管理工具，可以是nvm或者n"></a>管理工具，可以是nvm或者n</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## nvm安装方式同上</span><span class="token comment">## 安装n管理工具</span>$ <span class="token function">npm</span> <span class="token function">install</span> -g n<span class="token comment">## 查看n是否安装成功</span>$ n --version<span class="token comment">## 安装nodejs(sudo是使用的超级管理员权限)</span>$ n <span class="token number">18.18</span>.0$ <span class="token function">sudo</span> n <span class="token number">18.18</span>.0<span class="token comment">## 安装最新版本</span>$ n latest<span class="token comment">## 查看已安装的版本，结果用键盘上下键，回车切换版本</span>$ <span class="token function">sudo</span> n<span class="token comment">## 卸载已安装的版本</span>$ n <span class="token function">rm</span> <span class="token number">18.18</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./hexo02.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序npm构建报错，无法生成miniprogram_npm</title>
      <link href="/MyBlog/wechat-miniprogram-npm/"/>
      <url>/MyBlog/wechat-miniprogram-npm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、随记"><a href="#一、随记" class="headerlink" title="一、随记"></a>一、随记</h2><blockquote><p>🎯 问题：微信小程序在初始化项目后构建npm没有生成miniprogram_npm文件</p></blockquote><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote><p>1、初始化npm init<br>2、安装依赖 npm install XXXX<br>3、设置project.config.json文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 初始化npm init</span>$ <span class="token function">npm</span> init<span class="token comment">## 安装依赖 npm install XXXX</span>$ <span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>设置好project.config.json文件之后再次构建npm<br>开发者工具–&gt;工具–&gt;构建npm 就会生成 miniprogram_npm 文件夹了</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">## project.config.json"packNpmManually": false,"packNpmRelationList": [    {    "packageJsonPath": "./package.json",    "miniprogramNpmDistDir": "./"    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>页面中引入组件使用地址路径</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"navigationBarTitleText"</span><span class="token operator">:</span> <span class="token string">"测试页面"</span><span class="token punctuation">,</span>   <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"van-image"</span><span class="token operator">:</span> <span class="token string">"@vant/weapp/image/index"</span><span class="token punctuation">,</span>    <span class="token property">"van-tag"</span><span class="token operator">:</span><span class="token string">"@vant/weapp/tag/index"</span><span class="token punctuation">,</span>    <span class="token property">"van-cell"</span><span class="token operator">:</span> <span class="token string">"@vant/weapp/cell/index"</span><span class="token punctuation">,</span>    <span class="token property">"van-cell-group"</span><span class="token operator">:</span> <span class="token string">"@vant/weapp/cell-group/index"</span><span class="token punctuation">,</span>    <span class="token property">"van-row"</span><span class="token operator">:</span> <span class="token string">"@vant/weapp/row/index"</span><span class="token punctuation">,</span>    <span class="token property">"van-col"</span><span class="token operator">:</span> <span class="token string">"@vant/weapp/col/index"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sourcetree使用详解</title>
      <link href="/MyBlog/sourcetree-note/"/>
      <url>/MyBlog/sourcetree-note/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>🎯 最近遇到一个很奇怪的问题，使用sourcetree这么多年，第一次遇到<br>之前常用的都是使用sourcetree连接的远程仓库（Gitlab、GitHub、Gitee之类的）<br>这次是连接本地服务器私有库，在Mac上配置好信息之后使用也没有任何问题，但是在Windows上始终无法连接到服务器，呃，都不清楚是啥原因，目前正在探索中…</p></blockquote><h2 id="二、Tips"><a href="#二、Tips" class="headerlink" title="二、Tips"></a>二、Tips</h2><h3 id="1、Sourcetree中的基本名词说明："><a href="#1、Sourcetree中的基本名词说明：" class="headerlink" title="1、Sourcetree中的基本名词说明："></a>1、Sourcetree中的基本名词说明：</h3><p> 克隆/新建(clone)：从远程仓库URL加载创建一个与远程仓库一样的本地仓库。<br> 提交(commit)：将暂存区文件提交到本地仓库 ，相当于git commit -m ‘提交的内容’。<br> 拉取(pull)：从远程仓库获取信息并同步至本地仓库，并且自动执行合并（merge）操作（git pull=git fetch+git merge）。git pull<br> 推送(push)：将本地仓库同步至远程仓库，一般推送（push）前先拉取（pull）一次，确保一致。git push<br> 获取(fetch)：从远程仓库获取信息并同步至本地仓库。<br> 分支(branch)：创建/修改/删除分枝。<br> 合并(merge)：将多个同名文件合并为一个文件，该文件包含多个同名文件的所有内容，相同内容抵消。<br> 贮藏(git stash)：保存工作现场。<br> 丢弃(Discard)：丢弃更改,恢复文件改动/重置所有改动,即将已暂存的文件丢回未暂存的文件。<br> 标签(tag)：给项目增添标签。<br> 工作流(Git Flow)：团队工作时，每个人创建属于自己的分枝（branch），确定无误后提交到master分支。<br> 终端(terminal)：可以输入git命令行。每次拉取和推送的时候不用每次输入密码的命令行：git config credential.helper osxkeychain sourcetree。<br> 检出(checkout)：切换不同分支。<br> 添加（add）：添加文件到缓存区。<br> 移除（remove）：移除文件至缓存区。<br> 重置(reset)：回到最近添加(add)/提交(commit)状态。<br> 抓取：检测远程是否有更新，如果有变动会在拉取右上角出现数字角标。从远程获取最新版本到本地 , 不会自动合并 相当于git</p><p> <a href="https://cloud.tencent.com/developer/article/1650541">参考</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//也可以打开sourcetree右上角的git面板使用命令行提交代码</span><span class="token comment">// 1.提交推送</span>git add file_1 file_2 <span class="token comment">//添加暂存文件</span>git commit <span class="token operator">-</span>m <span class="token string">'提交的内容'</span> <span class="token comment">//将本地改动代码存储到本地仓库</span>git pull <span class="token comment">// 获取最新的代码</span>git push <span class="token comment">//推送至远程</span><span class="token comment">// 2.贮藏工作区</span>git stash <span class="token comment">//存储工作区</span>git stash save <span class="token string">'msg1'</span> <span class="token comment">// 存储工作区并备注</span>git stash list <span class="token comment">//展示存储区列表</span>git stash apply <span class="token comment">//应用存储区第一个 （不删除）</span>git stash pop <span class="token comment">//应用存储区第一个 （并删除）</span>git stash drop <span class="token comment">//删除存储区最新的内容</span>git stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">*</span>apply <span class="token operator">/</span> pop <span class="token operator">/</span> drop 第<span class="token number">1</span>个 ，git stash list获取下标<span class="token comment">// 3.回撤版本</span>git reset <span class="token operator">--</span>soft <span class="token number">34524234</span> <span class="token comment">// 将版本重置到34524234 版本，</span>git reset <span class="token operator">--</span>soft <span class="token constant">HEAD</span><span class="token operator">^</span> 将版本重置到上一个版本git reset <span class="token operator">--</span>hard <span class="token number">34524234</span><span class="token comment">// 4.其他</span>git remote update origin <span class="token operator">--</span>prune <span class="token comment">// 拉取/更新远程分支</span>git fetch <span class="token operator">--</span>unshallow <span class="token comment">// 拉取履历</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、git-常用操作命令"><a href="#2、git-常用操作命令" class="headerlink" title="2、git 常用操作命令"></a>2、git 常用操作命令</h3><blockquote><p>分支操作：<br>1.git branch //查看当前使用分支(结果列表中前面标*号的表示当前使用分支)<br>2.git branch -a //查看远程分支(列出远程分支以及本地分支名)<br>3.git branch -r  //列出远程分支(远程所有分支名)<br>4.git branch -v // 查看分支以及提交hash值和commit信息</p></blockquote><blockquote><p>1.git branch 分支名 //新建分支，本地没有就创建/获取<br>2.git checkout 分支名  //切换分支 或 检出分支<br>3.git checkout -b 分支名 //创建并切换分支，例如：git checkout -b test c6f68a8 在提交记录（c6f68a8）上创建一个名为test的分支<br>4.git branch -d 分支名 //删除分支<br>5.git branch -D 分支名 // 强制删除 若没有其他分支合并就删除 d会提示 D不会<br>6.git branch -m 旧分支名 新分支名 // 修改分支名<br>7.git branch -M 旧分支名 新分支名 // 修改分支名 M强制修改 若与其他分支有冲突也会创建(慎用)<br>8.git push  origin 分支名 // 将本地分支推送到远程<br>9.git merge 分支名 // 把该分支的内容合并到现有分支上</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> sourcetree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> sourcetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言环境搭建及本地项目运行笔记</title>
      <link href="/MyBlog/go/"/>
      <url>/MyBlog/go/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><blockquote><p>🎯 昨天弄了一下go 今天稍稍整理一下，做个笔记。<br>准备环境可以参考一下，运行项目啥的可以忽略，因为可能对其他公司项目并不适用（服务器上的环境不同）</p></blockquote><h2 id="二、准备环境"><a href="#二、准备环境" class="headerlink" title="二、准备环境"></a>二、准备环境</h2><blockquote><p>安装 <a href="https://golang.google.cn/dl/">go</a><br>配置系统环境变量<br>配置 GOPROXY 环境变量</p></blockquote><img src="./001.png" width="98%" title="下载安装包"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装成功之后，查看版本</span>go version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="./004.png" width="98%" title="查看go版本"><img src="./002.png" width="98%" title="配置环境变量"><p>配置 GOPROXY 环境变量，<a href="https://learnku.com/go/wikis/38122">可参考官方文档</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启用 Go Modules 功能</span>go <span class="token function">env</span> -w <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on<span class="token comment"># 配置 GOPROXY 环境变量，以下三选一</span><span class="token comment"># 1. 七牛 CDN</span>go <span class="token function">env</span> -w  <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span class="token comment"># 2. 阿里云</span>go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://mirrors.aliyun.com/goproxy/,direct<span class="token comment"># 3. 官方(个人推荐使用官方镜像)</span>go <span class="token function">env</span> -w  <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct<span class="token comment"># 配置成功之后，查看一下是否配置成功</span>go <span class="token function">env</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="./003.png" width="98%" title="查看go环境配置"><h2 id="三、运行本地项目"><a href="#三、运行本地项目" class="headerlink" title="三、运行本地项目"></a>三、运行本地项目</h2><blockquote><p>在go语言环境都搭建好的情况下，这里运行一下本地的项目（可忽略）<br>因为我本地的项目，使用的框架版本特殊，因此有些操作需要手动替换一下框架包</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 初始化go.mod (如已有.mod文件则忽略)</span>go mod init<span class="token comment">// 安装一个项目下的所有依赖 (建议配置好镜像再进行依赖下载)</span>go get <span class="token operator">-</span>v <span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">...</span><span class="token comment">// go命令手动加载所有的安装包</span>go get <span class="token operator">-</span>d <span class="token operator">-</span>v <span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">...</span><span class="token comment">// 启动项目</span>go run 项目入口文件<span class="token punctuation">.</span>go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异常1：<br>会出现app.StaicWeb之类的语法错误，是因为你iris依赖的版本和代码不匹配，公司项目用的一点几版本，目前最新是二点几版本。<br>解决：<br>1、命令行下载服务器上的依赖：scp&nbsp;<a href="mailto:root@tiny.fndroid.com">root@tiny.fndroid.com</a>:/home/go-workspace.tar .<br>2、命令行go env 找到你的GOPATH路径<br>3、把GOPATH路径目录里的pkg\mod\github.com\katarars 的iris包替换掉（嗯，我这里是直接将get下来的包重命名了，然后将pkg\mod\github.com\katarars 的iris包重命名为get下来的包名）<br>4、再次运行go run main.go会报路径上的错（是因为mod装的依赖原因，服务器没用mod）<br>5、把main.go文件里的 handler “./handler” 改成 “项目文件名/main.go”<br>6、再次运行go run main.go即可</p><p>项目部署:<br>1、项目运行成功之后，可以在本地进行改动，改动完之后提交代码至仓库<br>2、ssh上服务器，到对应的项目目录下，拉取最新的代码，然后编译，重启即可</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 示例</span><span class="token comment">// 拉取最新的代码</span>git pull<span class="token comment">// 编译项目（打包）</span>go build wifi<span class="token punctuation">.</span>go<span class="token comment">// 重启</span>pm2 restart wifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy new year 2023</title>
      <link href="/MyBlog/happy-new-year2023/"/>
      <url>/MyBlog/happy-new-year2023/</url>
      
        <content type="html"><![CDATA[<img src="https://image.dbbqb.com/202301301122/9b45ac73762277515ef49f748c557585/p31X"><h2 id="一、制定新年flag"><a href="#一、制定新年flag" class="headerlink" title="一、制定新年flag"></a>一、制定新年flag</h2><blockquote><p>新年好呀～欢迎👏进入我的2023（随记📝）<br>年复一年，希望我们年富一年！虽然我们的人生进度条不尽相同，但还是感恩🙏一直陪伴在身边的朋友们，有幸见证彼此人生一些高光时刻💗</p></blockquote><blockquote><p>新的一年，依旧没有宏伟目标，只有一些小小的改变。不变的是坚持自己的爱好，小小改变是丰富自己的生活<br>或许是真的老了，我对外界的世界没有了过多的期待，反而喜欢宅在家里，在属于自己的空间里，做点自己的事情，消磨时光</p></blockquote><blockquote><p>于是，今年给自己定了一个小小的目标 —— 学习剪辑PS✌️</p></blockquote><blockquote><p>专业人士都是经过学习深造的，而我入门当个野生剪辑er就好。<br>生活除了享受、运动还应该有些其他的东西来充实自己，周末的时光，我想学习ps还有剪辑。<br>1、记录📝自己的生活<br>2、get新技能</p></blockquote><blockquote><p>但行好事，莫问前程。<br>我始终相信，热爱生活，生活就晴朗☀️可爱。期待一下我的第一个作品吧～</p></blockquote><h2 id="二、正式学习前的一些小准备"><a href="#二、正式学习前的一些小准备" class="headerlink" title="二、正式学习前的一些小准备"></a>二、正式学习前的一些小准备</h2><p><b>课程推荐：亮虎pr课</b><br><b>视频剪辑四要素：高清度、配音、字幕和BGM</b><br><b>剪辑思维：系统课程、知识储备、模仿学习、写脚本（文案+素材+创意构思）</b></p><p><b>剪辑工具：</b><br>1、剪映【简单视频内容推荐使用】<br>2、premier pro【Pc用户优先推荐使用】<br>3、Final Cut Pro X【苹果用户优先推荐使用】<br>4、达芬奇【对调色功能要求高推荐使用】</p><p><b>收集的一些素材库：</b><br>1、<a href="https://www.aigei.com/sound/">音效</a><br>2、<a href="https://www.dbbqb.com/">表情包</a><br>3、<a href="http://www.atoolbox.net/">工具箱</a><br>4、<a href="https://www.btbuluo.net/">影视资源</a><br>5、<a href="https://sucai.zhiyu.art/">原创素材库</a><br>6、<a href="https://taira-komori.jpn.org/freesoundcn.html">音效素材</a>  /  <a href="https://www.spark.art/musicFine?id=2">花火音悦</a><br>7、<a href="http://peiyin.xunfei.cn/">文字转语音</a><br>8、<a href="https://www.pexels.com/zh-cn/">高清图片素材</a><br>9、<a href="https://www.newcger.com/">AE模板</a></p><p>以上就是目前收集的关键词信息啦～</p><img src="https://image.dbbqb.com/202301301120/f7ebbc19dd015eb5ffa6ac27122d75ee/ON5B">]]></content>
      
      
      
        <tags>
            
            <tag> special push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SortableJS拖拽排序</title>
      <link href="/MyBlog/client-sort/"/>
      <url>/MyBlog/client-sort/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近期使用SortableJS插件实现了前端页面table行拖拽排序，在这里📝一下<br><a href="http://www.sortablejs.com/index.html">SortableJS官方文档</a></p></blockquote><h2 id="一、引入SortableJS"><a href="#一、引入SortableJS" class="headerlink" title="一、引入SortableJS"></a>一、引入SortableJS</h2><blockquote><p>引入SortableJS可以有以下几种方式：</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// npm</span>npm i sortablejs<span class="token comment">// yarn</span>yarn add <span class="token operator">-</span><span class="token constant">D</span> sortablejs <span class="token comment">// CDN引入</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、使用SortableJS"><a href="#二、使用SortableJS" class="headerlink" title="二、使用SortableJS"></a>二、使用SortableJS</h2><blockquote><p>页面：正常使用table组件</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 正常使用table组件即可 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataList<span class="token punctuation">"</span></span> <span class="token attr-name">highlight-current-row</span> <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span>  <span class="token attr-name">border</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>No<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>index.number<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Room<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>index.group<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Msg1<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>list.Info1<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Msg2<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>list.Info2<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Msg3<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>list.Info3<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>js部分：<br>1、引入Sortable 2、在method中定义初始化Sortable函数 3、在mounted生命周期中调用初始化Sortable函数<br><a href="http://www.sortablejs.com/options.html">SortableJS配置项</a></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、在对应的页面引入Sortable</span><span class="token keyword">import</span> Sortable <span class="token keyword">from</span> <span class="token string">'sortablejs'</span><span class="token comment">// 2、在method中定义初始化Sortable函数</span><span class="token function">initSortTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 获取table对象（这里可以根据自己的页面上table组件情况来获取）</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.el-table__body-wrapper &gt; table &gt; tbody'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// const sortable = new Sortable(el, options);</span>  <span class="token comment">// 根据具体需求配置options配置项</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sortable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sortable</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span>    group<span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>    sort<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// boolean 定义是否列表单元是否可以在列表容器内进行拖拽排序</span>    animation<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>  <span class="token comment">// ms, number 单位：ms，定义排序动画的时间</span>    <span class="token function-variable function">onEnd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 监听拖动结束事件</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// this是当前vue上下文</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span>evt<span class="token punctuation">.</span>oldIndex<span class="token punctuation">)</span> <span class="token comment">// 当前行的被拖拽前的顺序</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">,</span>evt<span class="token punctuation">.</span>newIndex<span class="token punctuation">)</span> <span class="token comment">// 当前行的被拖拽后的顺序</span>      <span class="token keyword">const</span> currRow <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>newIndex<span class="token punctuation">]</span> <span class="token operator">=</span> currRow<span class="token punctuation">;</span>      <span class="token comment">// 将排序结果更新到数据库中，根据自己项目的逻辑进行实现即可。</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'排序成功，将结果保存到数据库中。。。。。'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initSortTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//页面组件渲染完毕初始化Sortable</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图如下：<br><img src="./sortable.jpg" width="100%"></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js日期操作工具类</title>
      <link href="/MyBlog/client-date-time-utils/"/>
      <url>/MyBlog/client-date-time-utils/</url>
      
        <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><blockquote><p>🎯 在js中会有许多关于日期的操作，比如日期的加减、格式化等等<br>本文收集了一些常用的js时间操作，有些是自己写的有些来源于网络上的一些copy<br>内容较多，有些也不记得是从哪里找的，就没一一粘贴出处了还请见谅！</p></blockquote><h2 id="二、工具类中一些实用方法"><a href="#二、工具类中一些实用方法" class="headerlink" title="二、工具类中一些实用方法"></a>二、工具类中一些实用方法</h2><ol><li><p>获取当前时间：年月日时分秒</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取当前时间年份</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取当前时间月份（月份是从0开始的）</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token comment">// 获取当前时间日期（获取的结果为整数，小于10的不会在数字前面自动填充0）</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取当前时间小时（24小时）</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取当前时间分钟</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取当前时间秒钟</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取当前时间毫秒数</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取当前时间 ‘年月日’ 时间戳</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li><p>年月日 日期格式化</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 通用日期格式化 * @author ckk * @param date * @param fmt 如："yyyyMMdd"、"yyyy/MM/dd"、"yyyy-MM-dd hh:mm:ss"、"yyyy年MM月dd日"、"yyyy-MM-dd"等等 * @returns {*} */</span><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> fmt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"M+"</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                      <span class="token comment">// 月</span>        <span class="token string">"d+"</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token comment">// 日</span>        <span class="token string">"h+"</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token comment">// 时</span>        <span class="token string">"m+"</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token comment">// 分</span>        <span class="token string">"s+"</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token comment">// 秒</span>        <span class="token string">"q+"</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 季度</span>        <span class="token string">"S"</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// 毫秒</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(y+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"00"</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 调用 dateFormat(new Date('2022/12/05'),'yyyyMMdd')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>年月日 日期格式化</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 通用日期加减 * @author ckk * @param dateStr * @param type 加减数的类型，d是天、h是小时... * @param num 正数加，负数减。ps：支持非整数 * @returns {Date} */</span><span class="token keyword">function</span> <span class="token function">addDay</span><span class="token punctuation">(</span><span class="token parameter">dateStr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">86400000</span><span class="token punctuation">;</span><span class="token comment">// 默认是天</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">24</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">24</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'ms'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">24</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment">// type == 'd'</span>        <span class="token comment">// m = m;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>m <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 调用 addDay('2022-12-05','d',2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>js获取今天~n天后的时间日期数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getWeekDay</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> dateArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> newDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">let</span> year <span class="token operator">=</span> newDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> month <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>newDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>newDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>newDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token punctuation">(</span>newDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">9</span> <span class="token operator">?</span> newDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"0"</span> <span class="token operator">+</span> newDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> fullDate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>dateArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fullDate<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> dateArr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lighter and princess outfit</title>
      <link href="/MyBlog/ase/"/>
      <url>/MyBlog/ase/</url>
      
        <content type="html"><![CDATA[<img src="./l&amp;p.jpg" width="100%" alt="L&amp;P"><blockquote><p>👸 “我有我的国王，我是他不二之臣；我愿为他摇旗呐喊，也愿为他战死沙场”——《打火机与公主裙》</p></blockquote><h2 id="一、唠嗑-CV"><a href="#一、唠嗑-CV" class="headerlink" title="一、唠嗑+CV"></a>一、唠嗑+CV</h2><blockquote><p>最近李峋的爱心💗代码🔥的不行，其实实现方式很简单，只需要不到1分钟时间就能搞定！<br>你以为我要将实现原理了吗？不，今天不讲原理，只是随便复制过来给朋友们玩一下哈哈哈<br>网上一大堆代码呢～</p></blockquote><!-- ![](./ase.jpg) --><img src="./ase.jpg" width="100%" alt="效果图"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>canvas爱心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">html, body</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">canvas</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* @keyframes heartbeat{    0%{transform: rotate(45deg) scale(0.8,0.8); opacity: 1;}    25%{transform: rotate(45deg) scale(1,1); opacity: 0.8;}    100%{transform: rotate(45deg) scale(0.8,0.8); opacity: 1;}} */</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pinkboard<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token comment">/* * Settings */</span><span class="token keyword">var</span> settings <span class="token operator">=</span> <span class="token punctuation">{</span>  particles<span class="token operator">:</span> <span class="token punctuation">{</span>    length<span class="token operator">:</span>   <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment">// maximum amount of particles</span>    duration<span class="token operator">:</span>   <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// particle duration in sec</span>    velocity<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">// particle velocity in pixels/sec</span>    effect<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token comment">// play with this for a nice effect</span>    size<span class="token operator">:</span>      <span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment">// particle size in pixels</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/* * RequestAnimationFrame polyfill by Erik M?ller */</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"ms"</span><span class="token punctuation">,</span><span class="token string">"moz"</span><span class="token punctuation">,</span><span class="token string">"webkit"</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>c<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>window<span class="token punctuation">.</span>requestAnimationFrame<span class="token punctuation">;</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>window<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">=</span>window<span class="token punctuation">[</span>c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"RequestAnimationFrame"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>cancelAnimationFrame<span class="token operator">=</span>window<span class="token punctuation">[</span>c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"CancelAnimationFrame"</span><span class="token punctuation">]</span><span class="token operator">||</span>window<span class="token punctuation">[</span>c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"CancelRequestAnimationFrame"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>requestAnimationFrame<span class="token punctuation">)</span><span class="token punctuation">{</span>window<span class="token punctuation">.</span><span class="token function-variable function">requestAnimationFrame</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> f<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token operator">-</span><span class="token punctuation">(</span>d<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> g<span class="token operator">=</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">h</span><span class="token punctuation">(</span>d<span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span>d<span class="token operator">+</span>f<span class="token punctuation">;</span><span class="token keyword">return</span> g<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>cancelAnimationFrame<span class="token punctuation">)</span><span class="token punctuation">{</span>window<span class="token punctuation">.</span><span class="token function-variable function">cancelAnimationFrame</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * Point class */</span><span class="token keyword">var</span> Point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> y <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token operator">?</span> y <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">length</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> length <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">*=</span> length<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">*=</span> length<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">normalize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">/=</span> length<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">/=</span> length<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Point<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * Particle class */</span><span class="token keyword">var</span> Particle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Particle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>acceleration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Particle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">initialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">=</span> dx<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> dy<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>x <span class="token operator">=</span> dx <span class="token operator">*</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>effect<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>y <span class="token operator">=</span> dy <span class="token operator">*</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>effect<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Particle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">deltaTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">*</span> deltaTime<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">*</span> deltaTime<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>x <span class="token operator">*</span> deltaTime<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>y <span class="token operator">*</span> deltaTime<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+=</span> deltaTime<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Particle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> image</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">ease</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">--</span>t<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> size <span class="token operator">=</span> image<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token function">ease</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">/</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">/</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>duration<span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Particle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * ParticlePool class */</span><span class="token keyword">var</span> ParticlePool <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> particles<span class="token punctuation">,</span>      firstActive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>      firstFree   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>      duration    <span class="token operator">=</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>duration<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">ParticlePool</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// create and populate particle pool</span>    particles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Particle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">ParticlePool</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    particles<span class="token punctuation">[</span>firstFree<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// handle circular queue</span>    firstFree<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstFree   <span class="token operator">==</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">)</span> firstFree   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstActive <span class="token operator">==</span> firstFree       <span class="token punctuation">)</span> firstActive<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstActive <span class="token operator">==</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">)</span> firstActive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">ParticlePool</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">deltaTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i<span class="token punctuation">;</span>        <span class="token comment">// update active particles</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstActive <span class="token operator">&lt;</span> firstFree<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> firstActive<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> firstFree<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstFree <span class="token operator">&lt;</span> firstActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> firstActive<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> firstFree<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// remove inactive particles</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>particles<span class="token punctuation">[</span>firstActive<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> duration <span class="token operator">&amp;&amp;</span> firstActive <span class="token operator">!=</span> firstFree<span class="token punctuation">)</span> <span class="token punctuation">{</span>      firstActive<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>firstActive <span class="token operator">==</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">)</span> firstActive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">ParticlePool</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> image</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// draw active particles</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstActive <span class="token operator">&lt;</span> firstFree<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> firstActive<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> firstFree<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstFree <span class="token operator">&lt;</span> firstActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> firstActive<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> particles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> firstFree<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        particles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ParticlePool<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * Putting it all together */</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">canvas</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      particles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParticlePool</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>      particleRate <span class="token operator">=</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>length <span class="token operator">/</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>duration<span class="token punctuation">,</span> <span class="token comment">// particles/sec</span>      time<span class="token punctuation">;</span>    <span class="token comment">// get point on heart with -PI &lt;= t &lt;= PI</span>  <span class="token keyword">function</span> <span class="token function">pointOnHeart</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>      <span class="token number">160</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token number">130</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">20</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">25</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">// creating the particle image using a dummy canvas</span>  <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> canvas  <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>width  <span class="token operator">=</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token comment">// helper function to create the path</span>    <span class="token keyword">function</span> <span class="token function">to</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">pointOnHeart</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      point<span class="token punctuation">.</span>x <span class="token operator">=</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>x <span class="token operator">*</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">350</span><span class="token punctuation">;</span>      point<span class="token punctuation">.</span>y <span class="token operator">=</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> point<span class="token punctuation">.</span>y <span class="token operator">*</span> settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">350</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// create the path</span>    context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">to</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      t <span class="token operator">+=</span> <span class="token number">0.01</span><span class="token punctuation">;</span> <span class="token comment">// baby steps!</span>      point <span class="token operator">=</span> <span class="token function">to</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    context<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// create the fill</span>    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#ea80b0'</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// create the image</span>    <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image<span class="token punctuation">.</span>src <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> image<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// render that thing!</span>  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// next animation frame</span>    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// update time</span>    <span class="token keyword">var</span> newTime   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span>        deltaTime <span class="token operator">=</span> newTime <span class="token operator">-</span> <span class="token punctuation">(</span>time <span class="token operator">||</span> newTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> newTime<span class="token punctuation">;</span>        <span class="token comment">// clear canvas</span>    context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// create new particles</span>    <span class="token keyword">var</span> amount <span class="token operator">=</span> particleRate <span class="token operator">*</span> deltaTime<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token function">pointOnHeart</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> dir <span class="token operator">=</span> pos<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span>particles<span class="token punctuation">.</span>velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>      particles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> pos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> pos<span class="token punctuation">.</span>y<span class="token punctuation">,</span> dir<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>dir<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// update and draw particles</span>    particles<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    particles<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">// handle (re-)sizing of the canvas</span>  <span class="token keyword">function</span> <span class="token function">onResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    canvas<span class="token punctuation">.</span>width  <span class="token operator">=</span> canvas<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> canvas<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> onResize<span class="token punctuation">;</span>    <span class="token comment">// delay rendering bootstrap</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pinkboard'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/MyBlog/wx-xiaochengxu-note-one/"/>
      <url>/MyBlog/wx-xiaochengxu-note-one/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><blockquote><p>🎯 前言：之前更多的都是偏向web前端的内容，这次也来简单了解一下移动端的小程序（对比一下）<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信官方文档</a></p></blockquote><h2 id="二、内容"><a href="#二、内容" class="headerlink" title="二、内容"></a>二、内容</h2><blockquote><p>小程序的相关文件类型、项目结构等我就不一一解释了，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信官方文档</a>都有很详细的说明哦！</p></blockquote><h3 id="1、小程序的优劣势"><a href="#1、小程序的优劣势" class="headerlink" title="1、小程序的优劣势"></a>1、小程序的优劣势</h3><blockquote><p>优势：<br>1、即用即走，不用安装，省流量，省安装时间，不占用桌面<br>2、依托微信流量，有推广传播优势<br>3、开发成本比 App 低</p></blockquote><blockquote><p>缺点：<br>1、限制较多,页面大小不能超过2M(可分包)<br>2、页面栈不能打开超过10个层级的页面</p></blockquote><h3 id="2、小程序的生命周期"><a href="#2、小程序的生命周期" class="headerlink" title="2、小程序的生命周期"></a>2、小程序的生命周期</h3><blockquote><p>onLoad() 页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数<br>onShow() 页面显示时/切入前台时触发。<br>onReady()页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互<br>onHide() 页面隐藏/切入后台时触发。 如 navigateTo 或底部 tab 切换到其他页面，小程序切入后台等<br>onUnload()页面卸载时触发。如 redirectTo 或 navigateBack 到其他页面时</p></blockquote><h3 id="3、wx-navigateTo-wx-redirectTo-wx-switchTab-wx-navigateBack-wx-reLaunch-的区别"><a href="#3、wx-navigateTo-wx-redirectTo-wx-switchTab-wx-navigateBack-wx-reLaunch-的区别" class="headerlink" title="3、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别"></a>3、wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch()的区别</h3><blockquote><p>wx.navigateTo() 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 wx.navigateBack 可以返回到原页面。小程序中页面栈最多十层<br>wx.redirectTo() 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。<br>wx.switchTab() 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br>wx.navigateBack() 关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages 获取当前的页面栈，决定需要返回几层<br>wx.reLaunch() 关闭所有页面，打开到应用内的某个页面</p></blockquote><h3 id="4、小程序的双向绑定和vue有什么不一样"><a href="#4、小程序的双向绑定和vue有什么不一样" class="headerlink" title="4、小程序的双向绑定和vue有什么不一样?"></a>4、小程序的双向绑定和vue有什么不一样?</h3><p>vue数据的双向绑定是可以直接同步到视图的，而小程序的双向绑定必须通过this.setData({属性名:属性值})来设置</p><h3 id="5、小程序页面数据传递方式"><a href="#5、小程序页面数据传递方式" class="headerlink" title="5、小程序页面数据传递方式"></a>5、小程序页面数据传递方式</h3><h4 id="1-使用globalData全局变量传递数据"><a href="#1-使用globalData全局变量传递数据" class="headerlink" title="1)使用globalData全局变量传递数据"></a>1)使用globalData全局变量传递数据</h4><blockquote><p>在 app.js 文件中定义全局变量 globalData， 将需要存储的信息存放在里面</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取其他小程序跳转过来携带的参数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>loginSystem <span class="token operator">=</span> <span class="token punctuation">{</span>        user<span class="token operator">:</span> options<span class="token punctuation">.</span>referrerInfo<span class="token punctuation">.</span>extraData<span class="token punctuation">.</span>user<span class="token punctuation">,</span>        passwd<span class="token operator">:</span> options<span class="token punctuation">.</span>referrerInfo<span class="token punctuation">.</span>extraData<span class="token punctuation">.</span>passwd<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  globalData<span class="token operator">:</span> <span class="token punctuation">{</span>    loginSystem<span class="token operator">:</span><span class="token punctuation">{</span>      user<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      passwd<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    userInfo<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在页面js使用时直接使用 getApp() 拿到存储的信息</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>loginSystem<span class="token punctuation">.</span>userapp<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>loginSystem<span class="token punctuation">.</span>passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-使用路由传值"><a href="#2-使用路由传值" class="headerlink" title="2)使用路由传值"></a>2)使用路由传值</h4><blockquote><p>比如：wx.navigateTo 与 wx.redirectTo跳转页面时，将部分数据放在url后面</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 示例</span>wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/pages/index/index?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;passwd=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>passwd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;userObj=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 在index页面的js中，获取参数</span><span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> options<span class="token punctuation">.</span>name    <span class="token keyword">let</span> passwd <span class="token operator">=</span> options<span class="token punctuation">.</span>passwd    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>userObj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 注意：wx.navigateTo 和 wx.redirectTo 不允许跳转到 tab 所包含的页面 onLoad 只执行一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-使用本地缓存-Storage"><a href="#3-使用本地缓存-Storage" class="headerlink" title="3)使用本地缓存 Storage"></a>3)使用本地缓存 Storage</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 暂存</span>wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> userObj<span class="token punctuation">)</span><span class="token comment">// 获取</span><span class="token keyword">let</span> user <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token comment">// 其他参照官方文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、小程序事件传值"><a href="#6、小程序事件传值" class="headerlink" title="6、小程序事件传值"></a>6、小程序事件传值</h3><blockquote><p>页面标签上通过 绑定 dataset-key = value ， 然后绑定点击通过e.currentTarget.dataset.key 来获取标签上绑定的值</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>van<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> bindtap<span class="token operator">=</span><span class="token string">"handelDetail"</span> data<span class="token operator">-</span>item<span class="token operator">=</span><span class="token string">"{{item}}"</span><span class="token operator">&gt;</span>事件传值<span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>button<span class="token operator">&gt;</span><span class="token comment">// 获取点击事件的对象</span><span class="token function">handelDetail</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>item<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、wx-if-和-hidden-的区别"><a href="#7、wx-if-和-hidden-的区别" class="headerlink" title="7、wx:if 和 hidden 的区别"></a>7、wx:if 和 hidden 的区别</h3><blockquote><p>类似于vue的 v-if 与 v-show<br>wx:if 有更高的切换消耗，运行时条件变化使用<br>hidden 有更高的初始渲染消耗，频繁切换使用</p></blockquote><h3 id="8、如何实现下拉刷新"><a href="#8、如何实现下拉刷新" class="headerlink" title="8、如何实现下拉刷新"></a>8、如何实现下拉刷新</h3><h4 id="1）通过-enablePullDownRefresh-配置开启全局下拉刷新"><a href="#1）通过-enablePullDownRefresh-配置开启全局下拉刷新" class="headerlink" title="1）通过 enablePullDownRefresh 配置开启全局下拉刷新"></a>1）通过 enablePullDownRefresh 配置开启全局下拉刷新</h4><blockquote><p>1、在全局 app.json 配置 enablePullDownRefresh 为 true (如果只在单个页面开启，就在对应的页面json中配置)<br>2、在 Page 中定义 onPullDownRefresh 钩子函数,到达下拉刷新条件后，该钩子函数执行，发起请求方法<br>3、请求返回后，调用 wx.stopPullDownRefresh 停止下拉刷新</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">onPullDownRefresh</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">showNavigationBarLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//启用标题栏显示加载状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用相关方法</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      wx<span class="token punctuation">.</span><span class="token function">hideNavigationBarLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//隐藏标题栏显示加载状态</span>      wx<span class="token punctuation">.</span><span class="token function">stopPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//停止下拉刷新</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置执行时间</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）通过-scroll-view-滚动组件实现自定义刷新"><a href="#2）通过-scroll-view-滚动组件实现自定义刷新" class="headerlink" title="2）通过 scroll-view 滚动组件实现自定义刷新"></a>2）通过 scroll-view 滚动组件实现自定义刷新</h4><blockquote><p>通过组件的 bindscrolltoupper 属性滚动到顶部时触发 scrolltoupper 事件实现刷新功能</p></blockquote><h3 id="9、bindtap和catchtap的区别"><a href="#9、bindtap和catchtap的区别" class="headerlink" title="9、bindtap和catchtap的区别"></a>9、bindtap和catchtap的区别</h3><blockquote><p>相同点：点击事件函数<br>不同点：bindtap 不会阻止冒泡，catchtap 阻止冒泡</p></blockquote><h3 id="10、登录流程"><a href="#10、登录流程" class="headerlink" title="10、登录流程"></a>10、登录流程</h3><blockquote><p>1、调wx.login获取code传给后台服务器获取微信用户唯一标识openid及本次登录的会话密钥（session_key）<br>2、获取到开发者服务器传回来的会话密钥（session_key）之后，前端可保存wx.setStorageSync(‘sessionKey’, ‘value’)持久登录状态：session信息存放在cookie中以请求头的方式带回给服务端，放到request.js里的wx.request的header里</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">//请求参数</span>      wx_code<span class="token operator">:</span> res<span class="token punctuation">.</span>code<span class="token punctuation">,</span><span class="token comment">//用户登录凭证（有效期五分钟）</span>    <span class="token punctuation">}</span>    <span class="token comment">// 看需要是否要请求服务端（可选）</span>    http<span class="token punctuation">.</span><span class="token function">postRequest</span><span class="token punctuation">(</span><span class="token string">"user/wxlogin"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>result_msg<span class="token operator">==</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取加载的页面</span>        <span class="token keyword">var</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>pages<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">//获取当前页面的对象</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> currentPage<span class="token punctuation">.</span>route <span class="token comment">//当前页面url   </span>        <span class="token keyword">var</span> skipUrl <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token constant">I</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token constant">I</span> <span class="token operator">&lt;</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token constant">I</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          skipUrl <span class="token operator">=</span> skipUrl <span class="token operator">+</span> <span class="token string">'../'</span>        <span class="token punctuation">}</span>        wx<span class="token punctuation">.</span><span class="token function">reLaunch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          url<span class="token operator">:</span> skipUrl<span class="token operator">+</span><span class="token string">'login/login'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>config<span class="token punctuation">.</span>token<span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求登录失败了"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、如何封装小程序请求"><a href="#11、如何封装小程序请求" class="headerlink" title="11、如何封装小程序请求"></a>11、如何封装小程序请求</h3><blockquote><p>以下内容来源于网络</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/**@param {*} url 请求路径 * @param {*} options 请求参数 * @param {*} isNeedTocken 是否需要Tocken * @param {*} isJson 是否已json形式传给后台, 否则仪表单的形式*/</span><span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options<span class="token punctuation">,</span>isNeedTocken<span class="token punctuation">,</span>isJson</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token comment">//拼接请求路径，读取app.js中的全局变量</span>      method<span class="token operator">:</span> options<span class="token punctuation">.</span>method<span class="token punctuation">,</span>      data<span class="token operator">:</span>isJson<span class="token operator">?</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">:</span>options<span class="token punctuation">.</span>data <span class="token punctuation">,</span>      header<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span>isJson<span class="token operator">?</span><span class="token string">'application/json'</span><span class="token operator">:</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>        <span class="token string">'authorization'</span><span class="token operator">:</span> isNeedTocken<span class="token operator">?</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>tocken<span class="token operator">:</span><span class="token string">''</span>  <span class="token comment">// 看自己是否需要</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//请求成功的状态码</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">fail</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** *封装get请求 */</span><span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>isNeedTocken <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>isJson <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> options <span class="token punctuation">}</span><span class="token punctuation">,</span>isNeedTocken<span class="token punctuation">,</span>isJson<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** * 封装post请求 */</span><span class="token keyword">const</span> <span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options<span class="token punctuation">,</span>isNeedTocken<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>isJson <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> options <span class="token punctuation">}</span><span class="token punctuation">,</span>isNeedTocken<span class="token punctuation">,</span>isJson<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//暴露接口</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  get<span class="token punctuation">,</span>  post<span class="token punctuation">}</span><span class="token comment">// 调用接口</span><span class="token keyword">import</span> req <span class="token keyword">from</span> <span class="token string">"../../api/request"</span><span class="token keyword">function</span> <span class="token function-variable function">testPost</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  req<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>login<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"phoneOrNumber"</span><span class="token operator">:</span>phoneOrNumber<span class="token punctuation">,</span><span class="token string">"possword"</span><span class="token operator">:</span>possword<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//处理成功的请求</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//请求报错，或者状态码返回错误。</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cropper图片裁剪</title>
      <link href="/MyBlog/vue-cropper-page/"/>
      <url>/MyBlog/vue-cropper-page/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><blockquote><p>🎯 前言：前端页面很多都涉及到图片裁剪的问题，开源的图片裁剪插件也挺多的。这次简单来讲一下Vue-Cropper吧<br><a href="https://github.com/xyxiao001/vue-cropper">vue-cropper GitHub地址</a></p></blockquote><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 安装</span><span class="token function">npm</span> <span class="token function">install</span> vue-cropper<span class="token comment"># yarn 安装</span><span class="token function">yarn</span> <span class="token function">add</span> vue-cropper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Vue 3 引用</span><span class="token comment">// 全局引用</span><span class="token keyword">import</span> VueCropper <span class="token keyword">from</span> <span class="token string">'vue-cropper'</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string">'vue-cropper/dist/index.css'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueCropper<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">// 组建内引用</span>npm install vue<span class="token operator">-</span>cropper@next<span class="token keyword">import</span> <span class="token string">'vue-cropper/dist/index.css'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> VueCropper <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">"vue-cropper"</span><span class="token punctuation">;</span><span class="token comment">// Vue 2 引用</span><span class="token comment">// 全局引用</span><span class="token keyword">import</span> VueCropper <span class="token keyword">from</span> <span class="token string">'vue-cropper'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueCropper<span class="token punctuation">)</span><span class="token comment">// 组建内引用</span><span class="token keyword">import</span> <span class="token punctuation">{</span> VueCropper <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">'vue-cropper'</span> components<span class="token operator">:</span> <span class="token punctuation">{</span>  VueCropper<span class="token punctuation">}</span><span class="token comment">// CDN 方式引入 与 nuxt 引入方式 参见GitHub上的使用方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、页面上的使用"><a href="#3、页面上的使用" class="headerlink" title="3、页面上的使用"></a>3、页面上的使用</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cropper-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-arrow-left<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$router.push({path: <span class="token punctuation">'</span>/department/list<span class="token punctuation">'</span>})<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #419fff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>返回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload-demo<span class="token punctuation">"</span></span><span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jpg,.png,.jepg,.bmp<span class="token punctuation">"</span></span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token attr-name">drag</span><span class="token attr-name">:auto-upload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token attr-name">:show-file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token attr-name">:on-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>handleChangeUpload<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-upload<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-upload__text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-upload__tip<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>支持.jpg,.png,.jepg,.bmp图片，单张图片最大支持2MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadImageToServer<span class="token punctuation">"</span></span> <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addLoading<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>previewImgList.length&gt;0<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span>25px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>上传到服务器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pre-box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">flex-flow</span><span class="token punctuation">:</span>row wrap<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span><span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in previewImgList<span class="token punctuation">"</span></span><span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token attr-name">@mouseenter.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menuShow(item)<span class="token punctuation">"</span></span><span class="token attr-name">@mouseleave.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HideMenu(item)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img_div<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.blobUrl<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgOptionMenu<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.isMenuShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-delete<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>40% 40%</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteImage(index)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- vueCropper 剪裁图片实现--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片剪裁<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>crop-dialog<span class="token punctuation">"</span></span> <span class="token attr-name">append-to-body</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cropper-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cropper<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vueCropper</span>                        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cropper<span class="token punctuation">"</span></span>                        <span class="token attr-name">:img</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.img<span class="token punctuation">"</span></span>                        <span class="token attr-name">:outputSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.size<span class="token punctuation">"</span></span>                        <span class="token attr-name">:outputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.outputType<span class="token punctuation">"</span></span>                        <span class="token attr-name">:info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.info<span class="token punctuation">"</span></span>                        <span class="token attr-name">:full</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.full<span class="token punctuation">"</span></span>                        <span class="token attr-name">:canMove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.canMove<span class="token punctuation">"</span></span>                        <span class="token attr-name">:canMoveBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.canMoveBox<span class="token punctuation">"</span></span>                        <span class="token attr-name">:original</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.original<span class="token punctuation">"</span></span>                        <span class="token attr-name">:autoCrop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.autoCrop<span class="token punctuation">"</span></span>                        <span class="token attr-name">:fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.fixed<span class="token punctuation">"</span></span>                        <span class="token attr-name">:fixedNumber</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.fixedNumber<span class="token punctuation">"</span></span>                        <span class="token attr-name">:centerBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.centerBox<span class="token punctuation">"</span></span>                        <span class="token attr-name">:infoTrue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.infoTrue<span class="token punctuation">"</span></span>                        <span class="token attr-name">:fixedBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.fixedBox<span class="token punctuation">"</span></span>                        <span class="token attr-name">:autoCropWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.autoCropWidth<span class="token punctuation">"</span></span>                        <span class="token attr-name">:autoCropHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.autoCropHeight<span class="token punctuation">"</span></span>                        <span class="token attr-name">:high</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.high<span class="token punctuation">"</span></span>                        <span class="token attr-name">@cropMoving</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cropMoving<span class="token punctuation">"</span></span>                    <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action-box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload-demo<span class="token punctuation">"</span></span>                           <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>                           <span class="token attr-name">:auto-upload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                           <span class="token attr-name">:show-file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                           <span class="token attr-name">:on-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>handleChangeUpload<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span><span class="token punctuation">&gt;</span></span>更换图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearImgHandle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>清除图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rotateLeftHandle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>左旋转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rotateRightHandle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>右旋转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeScaleHandle(1)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>放大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeScaleHandle(-1)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>缩小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>downloadHandle(<span class="token punctuation">'</span>blob<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible = false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>finish<span class="token punctuation">"</span></span> <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>确认<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>页面js</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"Cropper"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          dialogVisible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          previewImgList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 图片预览地址</span>          <span class="token comment">// 裁剪组件的基础配置option</span>          option<span class="token operator">:</span> <span class="token punctuation">{</span>              img<span class="token operator">:</span> <span class="token string">'https://pic1.zhimg.com/80/v2-366c0aeae2b4050fa2fcbfc09c74aad4_720w.jpg'</span><span class="token punctuation">,</span> <span class="token comment">// 裁剪图片的地址</span>              info<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 裁剪框的大小信息</span>              outputSize<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 裁剪生成图片的质量</span>              outputType<span class="token operator">:</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token comment">// 裁剪生成图片的格式</span>              canScale<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 图片是否允许滚轮缩放</span>              autoCrop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否默认生成截图框</span>              canMoveBox<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 截图框能否拖动</span>              autoCropWidth<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token comment">// 默认生成截图框宽度</span>              autoCropHeight<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token comment">// 默认生成截图框高度</span>              fixedBox<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 固定截图框大小 不允许改变</span>              fixed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启截图框宽高固定比例</span>              fixedNumber<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 截图框的宽高比例</span>              full<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否输出原图比例的截图</span>              original<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 上传图片按照原始比例渲染</span>              centerBox<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 截图框是否被限制在图片里面</span>              infoTrue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// true 为展示真实输出图片宽高 false 展示看到的截图框宽高</span>              high<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否按照设备的dpr 输出等比例图片【注意这个属性非常重要‼️】</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>    addLoading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment">// 防止重复提交</span>          loading<span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 页面渲染完</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 上传按钮 限制图片大小和类型</span>    <span class="token function">handleChangeUpload</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> isJPG <span class="token operator">=</span> file<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> isGIF <span class="token operator">=</span> file<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'image/gif'</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> isPNG <span class="token operator">=</span> file<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'image/png'</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> isBMP <span class="token operator">=</span> file<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'image/bmp'</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> isLt2M <span class="token operator">=</span> file<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isJPG <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isGIF <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isPNG <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isBMP<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'上传图片必须是JPG/GIF/PNG/BMP 格式!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLt2M<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'上传头像图片大小不能超过 2MB!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>      <span class="token comment">// 上传成功后将图片地址赋值给裁剪框显示图片</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">// base64方式</span>          <span class="token comment">// this.option.img = await fileByBase64(file.raw)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>img <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>raw<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 放大/缩小</span>    <span class="token function">changeScaleHandle</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cropper<span class="token punctuation">.</span><span class="token function">changeScale</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 左旋转</span>    <span class="token function">rotateLeftHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cropper<span class="token punctuation">.</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 右旋转</span>    <span class="token function">rotateRightHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cropper<span class="token punctuation">.</span><span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 下载</span>    <span class="token function">downloadHandle</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> aLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>        aLink<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'author-img'</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'blob'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cropper<span class="token punctuation">.</span><span class="token function">getCropBlob</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                aLink<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                aLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cropper<span class="token punctuation">.</span><span class="token function">getCropData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                aLink<span class="token punctuation">.</span>href <span class="token operator">=</span> data<span class="token punctuation">;</span>                aLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 清理图片</span>    <span class="token function">clearImgHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>img <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 截图框移动回调函数</span>    <span class="token function">cropMoving</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 截图框的左上角 x，y和右下角坐标x，y</span>        <span class="token comment">// let cropAxis = [data.axis.x1, data.axis.y1, data.axis.x2, data.axis.y2]</span>        <span class="token comment">// console.log(cropAxis)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 获取截图的 blob 数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cropper<span class="token punctuation">.</span><span class="token function">getCropBlob</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>previewImgList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>blobUrl<span class="token operator">:</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">,</span>imgBlob<span class="token operator">:</span> blob<span class="token punctuation">,</span>isMenuShow<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment">// 获取截图的 base64 数据</span>      <span class="token comment">// this.$refs.cropper.getCropData(data =&gt; {</span>      <span class="token comment">//     console.log(data)</span>      <span class="token comment">// })</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">menuShow</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      param<span class="token punctuation">.</span>isMenuShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">HideMenu</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      param<span class="token punctuation">.</span>isMenuShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deleteImage</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>previewImgList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">getFileNameStr</span><span class="token punctuation">(</span><span class="token parameter">imgBlob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> infoArr <span class="token operator">=</span> imgBlob<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'图'</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100000</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span> infoArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> str    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">async</span> <span class="token function">uploadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> desc <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>addLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>previewImgList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFileNameStr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>previewImgList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imgBlob<span class="token punctuation">)</span>        <span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>previewImgList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imgBlob<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// console.log('图片数据',this.previewImgList)</span>            <span class="token keyword">let</span> uploadRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http                <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">API_HOST</span> <span class="token operator">+</span> <span class="token string">'picture/upload?token='</span> <span class="token operator">+</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;desc='</span> <span class="token operator">+</span> desc<span class="token punctuation">,</span> form<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result_code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上传失败了'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>previewImgList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">'/picture/list'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">uploadImageToServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">uploadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上传到服务器</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>页面CSS样式</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.cropper-wrapper</span> <span class="token punctuation">{</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token selector">.pre-box</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token selector">button</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.crop-dialog</span> <span class="token punctuation">{</span>    <span class="token selector">.cropper-content</span> <span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 40px<span class="token punctuation">;</span>        <span class="token selector">.cropper</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 1400px<span class="token punctuation">;</span>            <span class="token property">max-height</span><span class="token punctuation">:</span> 900px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">.action-box</span> <span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 25px 40px 0 40px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token selector">button</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">.dialog-footer</span> <span class="token punctuation">{</span>        <span class="token selector">button</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.imgOptionMenu</span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>156<span class="token punctuation">,</span> 155<span class="token punctuation">,</span> 155<span class="token punctuation">,</span> 0.6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector">.img_div:hover .imgOptionMenu</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、效果预览"><a href="#4、效果预览" class="headerlink" title="4、效果预览"></a>4、效果预览</h3><p><img src="./pic_cropper.jpg"></p><p><img src="./pic_del.jpg"></p><blockquote><p>为了图片裁剪更精准，其中几个重要属性值建议如下：<br>1、high 是否按照设备的dpr 输出等比例图片，默认是true。建议使用false（原图比例输出到页面即可）<br>2、original 上传图片按照原始比例渲染，默认为false。建议使用true（按照原始图片大小渲染）<br>3、infoTrue true 为展示真实输出图片宽高 false 展示看到的截图框宽高，默认为false。建议使用true（展示真实的图片宽高）</p></blockquote><img src="https://s1.ax1x.com/2022/07/12/jg4omq.jpg" width="30%">]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cropper图片裁剪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序上传文件</title>
      <link href="/MyBlog/wx-xiaochengxu-uploadfile/"/>
      <url>/MyBlog/wx-xiaochengxu-uploadfile/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><blockquote><p>🎯 前言：这次的需求是要在小程序里下载模板文件，然后编辑好数据再上传<br>这里就涉及到小程序的文件下载、保存、上传等功能。通常我们在小程序中处理图片文件的上传下载还是很ok的，但是如果是pdf Excel等文件就会稍复杂一些。<br>为什么会复杂一些呢？因为按照我们想法💡应该是从服务端下载文件，保存在本地，然后上传时再从本地选取该文件即可。<br>而事实却是：在微信小程序中，存储文件是有一个独立的空间，虽然是在微信app的缓存中也没办法做到下载后快捷进入文件目录里。同时，官方文档中也有说明不建议查询本地文件的存储路径，因此我们只有采取其他的方式来实现。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html">微信小程序开发文档</a></p></blockquote><h2 id="二、处理方式"><a href="#二、处理方式" class="headerlink" title="二、处理方式"></a>二、处理方式</h2><blockquote><p>1、下载的文件没办法快捷进入文件所在的目录，那我们下载完就打开预览文件呢？然后通过分享，将文件保存在微信客户端的会话中<br>2、在编辑完文件之后，从微信客户端会话中选取要上传的文件即可（这样既不用查询本地文件存储路径也可以实现需求）</p></blockquote><p>按照官方文档提供的API</p><ol><li><p>下载文件，并打开文件预览</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 下载文件-预览文件</span><span class="token function">downloadTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  wx<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">xxx/xxxxx/test.xlsx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token comment">// 文件下载路径</span>    <span class="token function">success</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">openDocument</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          filePath<span class="token operator">:</span> res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">,</span>          showMenu<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//关键点（展示右上角三个点，可将文件分享出去）</span>          fileType<span class="token operator">:</span><span class="token string">'xlsx'</span><span class="token punctuation">,</span>          <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'打开文档成功'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从微信客户端会话中选取文件并上传</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 上传文件  wx.uploadFile(Object object)</span> <span class="token function">uploadPersonFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>   wx<span class="token punctuation">.</span><span class="token function">chooseMessageFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">// 从微信客户端会话中选取文件</span>     count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     type<span class="token operator">:</span> <span class="token string">'file'</span><span class="token punctuation">,</span>     extension<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.xlsx'</span><span class="token punctuation">,</span> <span class="token string">'.xls'</span><span class="token punctuation">,</span> <span class="token string">'.XLSX'</span><span class="token punctuation">,</span> <span class="token string">'.XLS'</span><span class="token punctuation">,</span> <span class="token string">'xlsx'</span><span class="token punctuation">,</span> <span class="token string">'xls'</span><span class="token punctuation">,</span> <span class="token string">'XLSX'</span><span class="token punctuation">,</span> <span class="token string">'XLS'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> tempFilePaths <span class="token operator">=</span> res<span class="token punctuation">.</span>tempFiles <span class="token comment">// 返回的是数组，支持多文件上传，可以设置count参数</span>       wx<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">xxxxxxxx/upload</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token comment">// 文件上传路径</span>         filePath<span class="token operator">:</span> tempFilePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span><span class="token comment">// 要上传文件资源的路径 (本地路径)</span>         name<span class="token operator">:</span> <span class="token string">'doc'</span><span class="token punctuation">,</span><span class="token comment">// 文件对应的名字 key，与服务端参数名一致即可</span>         formData<span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token string">'doc'</span><span class="token operator">:</span> tempFilePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path         <span class="token punctuation">}</span><span class="token punctuation">,</span>         header<span class="token operator">:</span> <span class="token punctuation">{</span>           token<span class="token operator">:</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取返回的数据信息'</span><span class="token punctuation">,</span>resp<span class="token punctuation">)</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件上传成功'</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2></li></ol><blockquote><p>踩坑提示：<br>1、wx.openDocument 预览文件时，如果不指定预览文件类型 fileType:’xlsx’<a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html">文件类型值参考</a> 就会出现异常提示：{errMsg: “openDocument:fail filetype not supported”}<br>2、 wx.uploadFile 上传文件时，如果有使用到 this 关键字，需要在方法前定义好变量保存 this (作用域问题)，不然可能会出现异常：TypeError: Cannot read property ‘xxx’ of undefined</p></blockquote><img src="https://s1.ax1x.com/2022/07/12/jg4omq.jpg" width="30%">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 引入 Echart</title>
      <link href="/MyBlog/client-vue3-echarts/"/>
      <url>/MyBlog/client-vue3-echarts/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Vue3-引入-Echart"><a href="#一、Vue3-引入-Echart" class="headerlink" title="一、Vue3 引入 Echart"></a>一、Vue3 引入 Echart</h2><blockquote><p>🎯 Echarts 版本5+ 更新后引入方式也发生了一点小改变<br>老版本：import echarts from ‘echarts’<br>5+版本：import * as echarts from ‘echarts’<br>详情参照<a href="https://echarts.apache.org/handbook/zh/basics/import">Echarts官网</a></p></blockquote><h3 id="1-安装echarts依赖"><a href="#1-安装echarts依赖" class="headerlink" title="1. 安装echarts依赖"></a>1. 安装echarts依赖</h3><pre class="line-numbers language-none"><code class="language-none">npm i echarts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-在页面上使用"><a href="#2-在页面上使用" class="headerlink" title="2. 在页面上使用"></a>2. 在页面上使用</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import * as echarts from 'echarts'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：如果引入方式出错可能会导致echarts.init()方法报错<br>报错信息：Cannot read property ‘init’ of undefined</p></blockquote><h3 id="3-定义初始化函数渲染图表"><a href="#3-定义初始化函数渲染图表" class="headerlink" title="3. 定义初始化函数渲染图表"></a>3. 定义初始化函数渲染图表</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&lt;script lang="ts" setup&gt;import * as echarts from 'echarts'type EChartsOption = echarts.EChartsOption// 饼图const myPieLoad = () =&gt; {    var myChart = echarts.init(document.getElementById('main'))    var option: EChartsOption    option = {        dataset: [            {                source: [                    ['Product', 'Sales', 'Price', 'Year'],                    ['Cake', 123, 32, 2011],                    ['Cereal', 231, 14, 2011],                    ['Tofu', 235, 5, 2011],                    ['Dumpling', 341, 25, 2011],                    ['Biscuit', 122, 29, 2011],                    ['Cake', 143, 30, 2012],                    ['Cereal', 201, 19, 2012],                    ['Tofu', 255, 7, 2012],                    ['Dumpling', 241, 27, 2012],                    ['Biscuit', 102, 34, 2012],                    ['Cake', 153, 28, 2013],                    ['Cereal', 181, 21, 2013],                    ['Tofu', 395, 4, 2013],                    ['Dumpling', 281, 31, 2013],                    ['Biscuit', 92, 39, 2013],                ]            },            {                transform: {                    type: 'filter',                    config: { dimension: 'Year', value: 2011 }                }            },            {                transform: {                    type: 'filter',                    config: { dimension: 'Year', value: 2012 }                }            },            {                transform: {                    type: 'filter',                    config: { dimension: 'Year', value: 2013 }                }            }        ],        series: [            {            type: 'pie',            radius: 50,            center: ['50%', '25%'],            datasetIndex: 1            },            {            type: 'pie',            radius: 50,            center: ['50%', '50%'],            datasetIndex: 2            },            {            type: 'pie',            radius: 50,            center: ['50%', '75%'],            datasetIndex: 3            }        ],        media: [            {            query: { minAspectRatio: 1 },            option: {                series: [                { center: ['25%', '50%'] },                { center: ['50%', '50%'] },                { center: ['75%', '50%'] }                ]            }            },            {            option: {                series: [                { center: ['50%', '25%'] },                { center: ['50%', '50%'] },                { center: ['50%', '75%'] }                ]            }            }        ]    }    option &amp;&amp; myChart.setOption(option)}// 当页面DOM元素挂载完毕之后开始调用饼图的初始化函数onMounted(() =&gt; {    myPieLoad()})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>页面html只需要放置一个div标签用来展示饼图即可</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果出现错误信息：Initialize failed: invalid dom<br>dom加载出现的问题，那么可能就是页面在dom元素还没加载完就执行了echarts.init(document.getElementById(‘main’))<br>而Vue3 的 setup 中直接调用，是在页面初始化时就调用了（beforeCreat / created）<br>因此强烈建议在 onMounted 中对图表进行初始化渲染，组装数据可以在页面加载时向服务端请求数据。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Element+ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在私服创建私有库</title>
      <link href="/MyBlog/server-private-library/"/>
      <url>/MyBlog/server-private-library/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><blockquote><p>🎯 平时编程都会有指定的仓库存储代码，除了一些公开的，比如码云、GitHub等<br>也有在公司自己的服务器上搭建的git仓库，那么我们如何将代码上传到我们自己服务器的私有库上呢？<br>具体操作如下：</p></blockquote><h2 id="二、将代码上传到自己服务器的私有库"><a href="#二、将代码上传到自己服务器的私有库" class="headerlink" title="二、将代码上传到自己服务器的私有库"></a>二、将代码上传到自己服务器的私有库</h2><h3 id="1-服务器环境"><a href="#1-服务器环境" class="headerlink" title="1.服务器环境"></a>1.服务器环境</h3><blockquote><p>安装 git<br>配置git的SSH访问</p></blockquote><h3 id="2-本地创建项目并上传到服务器私有库"><a href="#2-本地创建项目并上传到服务器私有库" class="headerlink" title="2.本地创建项目并上传到服务器私有库"></a>2.本地创建项目并上传到服务器私有库</h3><blockquote><p>a、本地客户端验证连接（输入root账号的密码连接服务器）</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">ssh root@服务器地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>b、进入到指定的目录下创建私有库</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、创建私有库：</span>mkdir repository<span class="token punctuation">.</span>git<span class="token comment">// 2、将私有库设置为git用户所有：</span>chown <span class="token operator">-</span><span class="token constant">R</span> git<span class="token operator">:</span>git repository<span class="token punctuation">.</span>git<span class="token comment">// 3、进入私有仓库：</span>cd repository<span class="token punctuation">.</span>git<span class="token comment">// 4、初始化git仓库：</span>git init <span class="token operator">-</span> <span class="token operator">-</span>bare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>c、将本地项目初始化关联并上传仓库</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 进入项目根目录下初始化项目：</span>git init<span class="token comment">// 关联远程仓库：</span>git remote add origin 远程仓库地址<span class="token comment">// (关联上远程仓库后进入.gitignore文件下看看该忽略上传的文件目录是否已经忽略)添加所有文件(除忽略文件之外)：</span>git add <span class="token punctuation">.</span><span class="token comment">// 提交到本地仓库：</span>git commit <span class="token operator">-</span>m <span class="token string">"备注信息"</span><span class="token comment">// 推送至远程仓库：</span>git push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充：</p><p>私有库设为git用户所有：chown -R 用户:用户组 repository.git</p><p>查询文件权限：ls -l</p><p>根据端口号查看对应的进程（运行的项目）：netstat -apn|grep 6011（端口）</p><p>退出远程登录：Ctrl + D</p><img src="https://s6.jpg.cm/2021/12/08/LdjvgX.png" width="40%">]]></content>
      
      
      <categories>
          
          <category> server </category>
          
          <category> repository </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> 私有库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序父组件调用子组件的方法</title>
      <link href="/MyBlog/xiaochengxu-parent-child/"/>
      <url>/MyBlog/xiaochengxu-parent-child/</url>
      
        <content type="html"><![CDATA[<h2 id="一、微信小程序父组件调用子组件的方法"><a href="#一、微信小程序父组件调用子组件的方法" class="headerlink" title="一、微信小程序父组件调用子组件的方法"></a>一、微信小程序父组件调用子组件的方法</h2><h3 id="1-在子组件的methods里定义方法"><a href="#1-在子组件的methods里定义方法" class="headerlink" title="1.在子组件的methods里定义方法"></a>1.在子组件的methods里定义方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>        selectSizeShow<span class="token operator">:</span><span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    properties<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">selectSizeshowPopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> selectSizeShow<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">selectSizeonClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> selectSizeShow<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-父组件调用"><a href="#2-父组件调用" class="headerlink" title="2.父组件调用"></a>2.父组件调用</h3><blockquote><p>在wxml里定义一个id唯一标识<br>showSelectSize 用来触发子组件的方法<br>父组件index.js中通过id标识获取子组件对象，并调用子组件的方法</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>selectSize id<span class="token operator">=</span><span class="token string">"selectSize"</span> options<span class="token operator">=</span><span class="token string">"{{optionsSize}}"</span> atSize<span class="token operator">=</span><span class="token string">"{{atSize}}"</span>  bind<span class="token operator">:</span>switchSize<span class="token operator">=</span><span class="token string">"switchSize"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>selectSize<span class="token operator">&gt;</span><span class="token operator">&lt;</span>van<span class="token operator">-</span>icon name<span class="token operator">=</span><span class="token string">"setting-o"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"headerIcon"</span> bindtap<span class="token operator">=</span><span class="token string">"showSelectSize"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 激活切换分辨率/尺寸的组件</span>    <span class="token function">showSelectSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> selectSizeObj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectComponent</span><span class="token punctuation">(</span><span class="token string">"#selectSize"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>selectSizeObj<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">//子组件的数据</span>        selectSizeObj<span class="token punctuation">.</span><span class="token function">selectSizeshowPopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//子组件的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-upload自定义文件上传</title>
      <link href="/MyBlog/element-upload-file/"/>
      <url>/MyBlog/element-upload-file/</url>
      
        <content type="html"><![CDATA[<h2 id="一、为啥会有这篇烂文"><a href="#一、为啥会有这篇烂文" class="headerlink" title="一、为啥会有这篇烂文"></a>一、为啥会有这篇烂文</h2><blockquote><p>🎯 最近没有什么可以输入的博客，但是又不想持续断更，所以就有了👇下面这篇文章来凑字数了<br>今天写点常见的问题吧！文件上传，虽然UI框架已经提供给我们很完善的文件上传组件了，但是大多数时候我们还是需要自定义上传方法来实现具体的业务需求<br>看完第二句话其实，下文就可以省略了。（如果您正好有空，愿意赏光看完下面的废话文字，小编表示万分的感谢🙏）</p></blockquote><h2 id="二、回归正题"><a href="#二、回归正题" class="headerlink" title="二、回归正题"></a>二、回归正题</h2><h3 id="1-element官网API"><a href="#1-element官网API" class="headerlink" title="1. element官网API"></a>1. element官网API</h3><p>老规矩先来贴一个官网链接：<a href="https://element.eleme.cn/#/zh-CN/component/upload">ElementUI 文件上传</a><br>有需要的自行下单哈哈哈哈哈</p><h3 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2. 具体实现"></a>2. 具体实现</h3><blockquote><p>1、配置好组件的必要属性值，比如：action、accept、auto-upload、on-change等<br>2、自定义文件上传、提交方法，覆盖 http-request 对应的上传方法<br>3、实现自定义的方法<br>4、如果是批量上传则需要配合，on-change、on-remove来获取上传文件list。因为el-upload是通过模拟表单来上传文件的，所以需要我们new FormData() 将文件列表append到表单中再提交</p></blockquote><pre class="line-numbers language-none"><code class="language-none"> &lt;el-upload   accept=".jpg,.png,.jepg,.bmp"   class="avatar-uploader"   action="api/picture/xxx"   :show-file-list="false"   :http-request="uploadSectionFile"   :auto-upload="true"   :on-change="handleChange"   :file-list="fileList" &gt;   &lt;img :src="imageUrl" class="avatar"/&gt;&lt;/el-upload&gt; &lt;el-button type="primary" @click="submitUpload"&gt;提交&lt;/el-button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 添加文件【文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用】</span><span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  fileList <span class="token operator">=</span> fileList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>next<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>next<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> item<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>imageUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 自定义上传方法</span><span class="token function">uploadSectionFile</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> fileObj <span class="token operator">=</span> param<span class="token punctuation">.</span>file<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>formObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>formObj<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span> fileObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 提交上传图片</span><span class="token function">submitUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">API_HOST</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">picture/xxx?params1=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>params1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;color=+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>formObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 图片上传成功</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 上传失败</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>a、auto-upload 是否在选取文件后立即进行上传，默认为true。上传文件后会自动触发上传方法<br>b、多文件上传，如果将提交方法在自定义上传 http-request 中实现，会按照文件数量发送多次请求。（如果是同一个文件点击多次提交，发送请求也只有第一次点击时出发）一次提交上传多个文件需要将其上传与提交分开实现，上传文件处理文件list列表，提交上传则将参数一次提交到后台处理</p></blockquote><p><img src="https://s4.ax1x.com/2022/02/11/HU5hu9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS包管理工具 n 的使用</title>
      <link href="/MyBlog/nodejs-package-note/"/>
      <url>/MyBlog/nodejs-package-note/</url>
      
        <content type="html"><![CDATA[<h2 id="一、NodeJS包管理工具-n-的使用"><a href="#一、NodeJS包管理工具-n-的使用" class="headerlink" title="一、NodeJS包管理工具 n 的使用"></a>一、NodeJS包管理工具 n 的使用</h2><blockquote><p>在做项目过程中，有时候会遇到一些依赖包只能在指定的环境下使用<br>比如：<a href="https://github.com/sass/node-sass/releases/tag/v4.14.1">node-sass</a><br>在OSX环境下nodejs版本必须在14及一下的版本才能正常使用，而官网最新稳定版目前已经是18了</p></blockquote><p>出现以上这种情况为了兼容低版，我们只能通过包管理工具 n 来切换本地开发环境：nodejs版本<br>具体操作如下：</p><blockquote><p>1、查看本机nodejs版本：n ls<br>2、列出nodejs官网版本：n lsr / n lsr –all<br>3、下载官网最新稳定版本：sudo n lts<br>4、下载指定版本(下载、切换nodejs版本，需要sudo执行)：sudo n install v14.19.3<br>5、切换nodejs版本：sudo n</p></blockquote><blockquote><p>通过up/down选中需要的版本，回车即可切换<br>通过 node -v 确认版本是否切换成功</p></blockquote><p>简单的做个小笔记～</p><p><img src="./table.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态加载系统文字</title>
      <link href="/MyBlog/client-dynamicloading-font/"/>
      <url>/MyBlog/client-dynamicloading-font/</url>
      
        <content type="html"><![CDATA[<img src="https://s6.jpg.cm/2021/12/07/LQe3WG.jpg" width="90%"><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><blockquote><p>🎯 系统中需要用到不同字体文件，且可以随时增加新的字体文件<br>为了方便拓展维护，将字体文件放在服务端，前端在系统初始化的时候去请求接口获取所有的字体文件…<br>详细步骤如下：<br>1、将字体文件上传到服务端（cdn加速）后续拓展只需要将新的字体文件上传至服务端即可<br>2、前端通过接口获取字体文件的url及名称等信息<br>3、在接口中用js动态生成style标签，并动态组装字体css字符串，将其添加到style标签中<br>4、在系统初始化后调用接口即可</p></blockquote><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><blockquote><p>平时我们在系统中引入静态字体资源，新建css/scss文件，将本地静态资源引入css/scss中。在页面使用时 import 指定的字体css/scss文件即可</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>       <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'KaiTi'</span><span class="token punctuation">;</span> <span class="token comment">/**重命名字体名**/</span>       <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./KaiTi.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token comment">/**本地资源相对路径**/</span>       <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>       <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>       <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'HeiTi'</span><span class="token punctuation">;</span>       <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./HeiTi.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>       <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>       <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>       <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'SongTi'</span><span class="token punctuation">;</span>       <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./SongTi.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>       <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>       <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>       <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'WeiTi'</span><span class="token punctuation">;</span>       <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./WeiTi.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>       <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>       <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>动态引入字体文件则需要将以上操作用js动态生成</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入 axios</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token comment">// 字体数组：定义字体数组</span><span class="token keyword">export</span> <span class="token keyword">let</span> fontfamilys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 请求接口获取字体信息</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getFonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">API_HOST</span> <span class="token operator">+</span> <span class="token string">'api/getFonts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 获取字体信息 res.data.fonts</span>          <span class="token comment">// 创建style标签，并设置type</span>          <span class="token keyword">const</span> fontStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          fontStyle<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/css'</span><span class="token punctuation">;</span>          <span class="token comment">// 动态组装字体css字符串</span>          <span class="token keyword">let</span> fonts <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fonts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@font-face {font-family: '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token punctuation">.</span>font<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'; src: url('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> flag <span class="token operator">?</span> m<span class="token punctuation">.</span>oss <span class="token operator">:</span> localServerUrl <span class="token operator">+</span> m<span class="token punctuation">.</span>path <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">');font-weight: normal;font-style: normal;}</span><span class="token template-punctuation string">`</span></span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          fontStyle<span class="token punctuation">.</span>innerText <span class="token operator">=</span> fonts<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 将style标签追加到head标签中</span>          document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fontStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 组装字体类别数组</span>          fontfamilys <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fonts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> m<span class="token punctuation">.</span>name<span class="token punctuation">,</span> value<span class="token operator">:</span> m<span class="token punctuation">.</span>font <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始加载字体...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 动态生成的字体类型数组如下：</span><span class="token keyword">let</span> fontfamilys <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'宋体'</span><span class="token punctuation">,</span>      value<span class="token operator">:</span><span class="token string">'SongTi'</span><span class="token comment">// 对应字体文件别名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'楷体'</span><span class="token punctuation">,</span>      value<span class="token operator">:</span><span class="token string">'KaiTi'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'黑体'</span><span class="token punctuation">,</span>      value<span class="token operator">:</span><span class="token string">'HeiTi'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'魏体'</span><span class="token punctuation">,</span>      value<span class="token operator">:</span><span class="token string">'WeiTi'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'标宋'</span><span class="token punctuation">,</span>      value<span class="token operator">:</span><span class="token string">'JianBiaoSong'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 在界面中可根据 fontfamilys 数组的 value 值切换（style样式中的font-family属性值）页面字体 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tempImg<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickModel(item)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>    `color:${item.fontColor};    font-family:${item.fontCode};    -webkit-text-stroke: ${item.strockOpacity}px ${item.strockColor};`<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    测试文字  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Vue </tag>
            
            <tag> font </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一年前端求职准备 —— vue篇</title>
      <link href="/MyBlog/interview-vue-note/"/>
      <url>/MyBlog/interview-vue-note/</url>
      
        <content type="html"><![CDATA[<h2 id="一、故事分享"><a href="#一、故事分享" class="headerlink" title="一、故事分享"></a>一、故事分享</h2><blockquote><p>🎯 今年是我做前端的第二年，由于种种原因，2022年我又踏上了求职的道路。虽然前方道路坎坷不平，但是打工人没什么不可以，要有不服输的精神！<br>这次要分享的是纯干货（笔记📒）其中许多问题及解析均来源于网络上各位前辈的帖子，我根据自己的情况整理了一下并不是刻意抄袭哦！</p></blockquote><h2 id="二、关于Vue"><a href="#二、关于Vue" class="headerlink" title="二、关于Vue"></a>二、关于Vue</h2><h3 id="1-vue-的设计原则、优点"><a href="#1-vue-的设计原则、优点" class="headerlink" title="1. vue 的设计原则、优点"></a>1. vue 的设计原则、优点</h3><blockquote><p>vue是一个渐进式前端框架，SPA单页面应用。<br>SPA单页面应用有个缺点：不利于SEO，首页加载过慢，不支持IE8<br>优点：<br>● 易用性：提供数据响应式，组件式开发，单页面路由，数据渲染与视图分开<br>● 灵活性：渐进式框架最大的优点就是灵活性<br>● 高效性：虚拟dom和diff算法</p></blockquote><h4 id="如何理解vue组件化？"><a href="#如何理解vue组件化？" class="headerlink" title="如何理解vue组件化？"></a>如何理解vue组件化？</h4><p>（关键字：独立、可复用）</p><blockquote><p>组件化开发可以大幅度提高开发效率、测试性、复用性<br>组件化开发高内聚低耦合，遵循单项数据流。还可以提高应用性能<br>组件分类：页面组件、业务组件、通用组件<br>常见的组件化技术：属性prop、自定义事件、插槽…(组件通讯、扩展)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 组件化定义、优点、使用场景和注意事项等方面展开陈述，同时要强调vue中组件化的一些特点</span><span class="token comment">// 组件定义 </span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> template<span class="token operator">:</span> <span class="token string">'&lt;div&gt;this is a component&lt;/div&gt;'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件data为什么是个函数？"><a href="#组件data为什么是个函数？" class="headerlink" title="组件data为什么是个函数？"></a>组件data为什么是个函数？</h4><p>防止组件复用时数据相互影响</p><h4 id="单项数据流、双向绑定"><a href="#单项数据流、双向绑定" class="headerlink" title="单项数据流、双向绑定"></a>单项数据流、双向绑定</h4><blockquote><p>单向数据流：只允许父组件传递值给子组件，不能反向传递值。<br>双向数据绑定：在单向数据流的基础上通过自定义事件改变父组件中的数据值。<br>响应式原理：Object.defineProperty()数据劫持 + 发布订阅者模式</p></blockquote><p>优点：<br>● 所有状态的改变可记录、可跟踪、源头易溯<br>● 数据操作更直观、容易理解、可维护性强<br>● 数据变化页面自动变化、修改数据时状态可预测<br>缺点：<br>● 页面渲染完成后，数据不能自动更新需要整合新数据和模版重新渲染<br>● 代码量^数据流转过程长<br>● 在处理交互较多（局部状态多）的场景时比较繁琐</p><blockquote><p>v-model实际上就是$emit(‘input’) 与prop: value组合的语法糖</p></blockquote><h3 id="2-Vue2的响应式原理"><a href="#2-Vue2的响应式原理" class="headerlink" title="2. Vue2的响应式原理"></a>2. Vue2的响应式原理</h3><blockquote><p>vue初始化时会用Object.defineProperty()给data中每个属性（遍历+递归）添加 getter 和 setter 同时创建Dep和Watcher<br>进行依赖收集、派发更新。通过diff算法来对比新老vnode差异，通过patch及时更新DOM</p></blockquote><img src="./image.png" width="86%"><p>为什么频繁的数据变化只会渲染1次？<br>● a. 检测到数据发生变化<br>● b. 开启一个队列<br>● c. 在同一事件循环中缓冲有所改变，如果同一个watcher(ID相同)被多次触发，只会被推入队列 1 次</p><blockquote><p>执行顺序：update - queueWatcher - 维护观察队列(处理ID相同的watcher) - waiting标志位处理 - 处理$nextTick异步更新DOM</p><p>不优化：setter - Dep - watcher - update - run（不优化每个数据变化都会执行）</p></blockquote><h3 id="3-Vue2-Object-defineProperty-缺陷"><a href="#3-Vue2-Object-defineProperty-缺陷" class="headerlink" title="3. Vue2 Object.defineProperty() 缺陷"></a>3. Vue2 Object.defineProperty() 缺陷</h3><blockquote><p>初始化时需要遍历对象所有 key，如果对象层次较深，性能不好<br>通知更新过程需要维护大量 dep 实例和 watcher 实例，额外占用内存较多<br>Object.defineProperty 无法监听到数组元素的变化，只能通过劫持重写数方法<br>动态新增，删除对象属性无法拦截，只能用特定 set/delete API 代替<br>不支持 Map、Set 等数据结构</p></blockquote><p>● 无法监听数组。修改数组的索引和长度是无法被监控到的（数组的length初始化 =&gt; configurable: false），只能通过重写的方法来监听数组。（7种：push、shift、unshift、pop、reverse、sort、splice）<br>● 只能劫持对象属性，对于深层属性嵌套的对象，要劫持内部深层次的变化就需要深度递归/遍历（很大的性能消耗）。而Vue3的proxy可以劫持整个对象并返回一个新的对象（可以代理动态增加的属性值，还可以代理数组）</p><span style="color: red">Vue3用 proxy 来响应式数据，内部收集每个属性都有Dep存放所依赖的watcher支持监听对象和数组的变化，动态属性增删都可以拦截，新增数据结构全部支持，对象嵌套属性只代理第一层运行时递归，用到才代理，也不需要维护特别多的依赖关系，性能取得很大进步</span><p>Vue2代码的优化方法：<br>a. 对象层级不要嵌套太多<br>b. 不需要响应式的不要放在data中，可以Object.freeze()冻结数据</p><h3 id="4-Vue2的diff算法"><a href="#4-Vue2的diff算法" class="headerlink" title="4. Vue2的diff算法"></a>4. Vue2的diff算法</h3><p>数据变更触发页面重新渲染，会生成虚拟 DOM 并进行 patch</p><blockquote><p>diff 算法是一种通过同层的树节点进行比较的高效算法，特点：<br>(1). 比较只会在同层级进行, 不会跨层级比较（只比对父节点相同的新旧节点）<br>(2). 在diff比较的过程中，循环从两边向中间收拢<br>总结策略：深度优先，同层比较</p></blockquote><p>=&gt; 找到相同但不需要移动的节点<br>=&gt; 找到相同但需要移动的节点<br>=&gt; 新建/删除节点</p><blockquote><p>比较结果直接对真实的DOM修改Vue的patch是即时的，React是更新放入队列结果后集中处理</p><p>原理：当数据发生改变时，set方法会调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图</p></blockquote><p>对比 VUe3 diff算法：<br>● <span style="color: red">事件缓存：将事件缓存(如: @click)，可以理解为变成静态的了</span><br>● <span style="color: red">静态提升：第一次创建静态节点时保存，后续直接复用</span><br>● <span style="color: red">添加静态标记：给节点添加静态标记，以优化 Diff 过程</span></p><blockquote><p>编译阶段的优化，除了能更快的生成虚拟 DOM 以外，还使得 Diff 时可以跳过”永远不会变化的节点”<br>diff优化：<br>● <span style="color: red">Vue2 是全量 Diff，Vue3 是静态标记 + 非全量 Diff</span><br>● <span style="color: red">使用最长递增子序列优化了对比流程</span></p></blockquote><h3 id="5-Vue2-Computed原理"><a href="#5-Vue2-Computed原理" class="headerlink" title="5. Vue2 Computed原理"></a>5. Vue2 Computed原理</h3><blockquote><p>computed 计算属性，<span style="color: red">有缓存，</span>不支持异步。<br>其本质是一个惰性求值的观察者，内部通过this.dirty 标记计算属性，是否需要重新计算</p></blockquote><h3 id="6-Vue-Watcher原理"><a href="#6-Vue-Watcher原理" class="headerlink" title="6. Vue Watcher原理"></a>6. Vue Watcher原理</h3><blockquote><p>watcher 监听，没有缓存，支持异步。监听的是已经在data 中定义的变量，当该变量变化时，会触发watch 中的方法。<br>更多的是观察可以监听某些数据并执行回调，需要深度缓存可以打开deep: true 会对对象的每项属性进行监听（不建议，可能会出现性能问题）</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 深度缓存可以打开deep: true</span>watch<span class="token operator">:</span><span class="token punctuation">{</span>  msg<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">handler</span> <span class="token punctuation">(</span><span class="token parameter">newMsg<span class="token punctuation">,</span>oldMsg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    immediate<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    deep<span class="token operator">:</span><span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-Vue2-nextTick原理"><a href="#7-Vue2-nextTick原理" class="headerlink" title="7. Vue2 nextTick原理"></a>7. Vue2 nextTick原理</h3><blockquote><p>nextTick 是全局 vue 的函数，当数据更新了，在dom中渲染之后，自动调用该函数。<br>Promise - MutationObserver - SetImmediate - SetTimeOut<br>主要思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法</p></blockquote><p>使用场景：<br>● 在生命周期 created 函数进行的dom操作一定要放在 nextTick 回调中。原因是：在created 函数中dom还并未渲染出来，此时将dom操作的相关代码放入 nextTick 回调中与之对应的就是 mounted 函数，此时dom已经被渲染出来。<br>● 当数据发生变更后，想要立即操作新的视图。<br>● 当使用第三方插件时，想要在dom动态发生变化时重新应用插件。</p><p>原理：<br>Vue是异步执行dom更新的，一旦观察到数据变化，Vue就会开启一个队列，然后把在同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列。<br><span style="color: red">如果这个watcher被触发多次，只会被推送到队列一次。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOm操作。</span><br>而在下一个事件循环时，Vue会清空队列，并进行必要的DOM更新。<br>因此，<span style="color: red">在操作数据之后，并不会马上更新dom，而是要等异步队列被清除，下一个事件循环开始执行更新时才会对必要的dom进行更新。</span>这时想要根据更新的 DOM 状态去做某些事情，就不好处理。<br>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 举例：</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  _this<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 不使用this.$nextTick()方法会报错</span>    _this<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>test<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"created中更改了页面dom内容"</span><span class="token punctuation">;</span> <span class="token comment">// 更改DOM元素内容</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="key的作用"><a href="#key的作用" class="headerlink" title="key的作用"></a>key的作用</h4><p>key的唯一性可以被map数据结构充分利用<br>key是可以给每个vnode的唯一ID，依靠key diff操作可以更快速、准确，在对比中带key可以避免就地复用。</p><h3 id="8-Vue-router路由"><a href="#8-Vue-router路由" class="headerlink" title="8. Vue-router路由"></a>8. Vue-router路由</h3><p>默认hash（浏览器环境）｜ abstract（nodejs环境）</p><blockquote><p>hash 使用URL的 hash 值作为路由，支持所有浏览器除了HTML5 history API的浏览器<br>hash 会出现URL中，但不会被包含在 HTTP 请求中，对后端没有影响。因此改变 hash 不会重新加载页面<br>特点：<span style="color: red">兼容性好但是不美观</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 可以为 hash 的改变添加监听事件</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hashchange"</span><span class="token punctuation">,</span> funcRef<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>每一次改变 hash（window.location.hash），都会在浏览器的访问历史中增加一个记录。利用 hash 的以上特点，可以来实现前端路由“更新视图但不重新请求页面”的功能了</p><blockquote><p>history 依赖 HTML5 history API【新增的 pushState() 和 replaceState() 方法】和服务器配置<br>特点：<span style="color: red">虽然美观，但是刷新会出现 404 需要后端进行配置</span></p></blockquote><blockquote><p>abstract 支持所有的js运行环境，如nodejs服务端。如果没有浏览器API会强制进入这个模式</p></blockquote><h4 id="VueRouter跳转"><a href="#VueRouter跳转" class="headerlink" title="VueRouter跳转"></a>VueRouter跳转</h4><p>1）this.$router.push(页面路由)</p><p>传参有两种方式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、query：传参会显示在url地址栏，相当于get请求</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/orderList'</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">{</span> orderId<span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'orderList'</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">{</span> orderId<span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 目标页面获取参数：（这里是route不是router哦！）</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>orderId<span class="token comment">// 2、params：传参不会显示在地址栏，相当于post请求，但是params只能搭配name使用。</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'orderList'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> orderId<span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 只能用 name，使用path参数无效</span><span class="token comment">// 目标页面获取参数：</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>orderId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）router-link标签</p><p>动态路由跳转：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>   n为负数向后指定步数，n为正数向前n步<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 回退一步<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 前进一步<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><span style="color: red">获取当前页面路由：this.$router.path</span></p><h3 id="9-路由钩子函数是什么？执行顺序？"><a href="#9-路由钩子函数是什么？执行顺序？" class="headerlink" title="9. 路由钩子函数是什么？执行顺序？"></a>9. 路由钩子函数是什么？执行顺序？</h3><p>路由钩子的执行流程, 钩子函数种类有:全局守卫、路由守卫、组件守卫</p><p>完整的导航解析流程：</p><ol><li>导航被触发</li><li>在失活的组件里调用 beforeRouteLeave 守卫</li><li>调用全局的 beforeEach 守卫</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)</li><li>在路由配置里调用 beforeEnter</li><li>解析异步路由组件</li><li>在被激活的组件里调用 beforeRouteEnter</li><li>调用全局的 beforeResolve 守卫 (2.5+)</li><li>导航被确认</li><li>调用全局的 afterEach 钩子</li><li>触发 DOM 更新</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入</li></ol><h3 id="10-Vue中keep-alive原理"><a href="#10-Vue中keep-alive原理" class="headerlink" title="10. Vue中keep-alive原理"></a>10. Vue中keep-alive原理</h3><blockquote><p>keep-alive组件缓存，防止页面dom重复渲染，减少接口请求、减小服务器压力，缓存不活动的组件。实例会对缓存对应组件的vnode如果命中缓存就返回对应的vnode<br>参数：<br>include 需要缓存的组件name集合（String、RegExp、Array）<br>exclude 指定不需要缓存的组件name集合（优先级高于include）<br>max 最大缓存数，超出最大缓存数量删除第1个</p></blockquote><h3 id="11-vue的生命周期？什么情况下会触发？组件销毁时会卸载自定义事件跟原生事件吗？"><a href="#11-vue的生命周期？什么情况下会触发？组件销毁时会卸载自定义事件跟原生事件吗？" class="headerlink" title="11. vue的生命周期？什么情况下会触发？组件销毁时会卸载自定义事件跟原生事件吗？"></a>11. vue的生命周期？什么情况下会触发？组件销毁时会卸载自定义事件跟原生事件吗？</h3><h4 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期?"></a>vue的生命周期?</h4><p>● beforeCreate：初始化vue实例之前，没有dom<br>● created：初始化vue实例之后，没有dom<br>● beforeMount：js中的数据挂载到html之前，获取不到具体的dom，但vue挂载的根节点已经创建<br>● mounted：js中的数据挂载到html之后，<span style="color: red">组件绘制完成，数据和dom渲染已经出来</span></p><p>● beforeUpdate：vue中的data数据发生改变之前<br>● updated：vue中的data数据发生改变之后</p><p>● beforeDestroy：vue实例销毁之前，可解除事件绑定和销毁定时任务<br>● destroyed：vue实例销毁之后触发该事件</p><p>● activated【keep-alive 专属】组件被激活时调用<br>● deactivated【keep-alive 专属】组件被销毁时调用</p><h4 id="异步请求适合在哪一步发起？"><a href="#异步请求适合在哪一步发起？" class="headerlink" title="异步请求适合在哪一步发起？"></a>异步请求适合在哪一步发起？</h4><p>可以在钩子函数 created、beforeMount、mounted 中进行异步请求（此时data已经创建，可以将服务端端返回的数据进行赋值）</p><p>异步请求不需要依赖 Dom 推荐在 created 钩子函数中调用异步请求<br>优势：</p><ol><li>能更快获取到服务端数据，减少页面 loading 时间</li><li>ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性</li></ol><h4 id="什么时候会触发组件销毁？"><a href="#什么时候会触发组件销毁？" class="headerlink" title="什么时候会触发组件销毁？"></a>什么时候会触发组件销毁？</h4><blockquote><p>a. 页面关闭<br>b. 没有keep-alive时路由切换<br>c. v-if = false 时<br>d. 改变key值</p></blockquote><h4 id="父子组件生命周期钩子函数执行顺序"><a href="#父子组件生命周期钩子函数执行顺序" class="headerlink" title="父子组件生命周期钩子函数执行顺序"></a>父子组件生命周期钩子函数执行顺序</h4><p>挂载阶段：<br>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreat -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted</p><p>更新阶段：<br>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p><p>销毁阶段：<br>父beforeDestroy -&gt; 子 beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p><h3 id="12-Vue组件通讯方式有哪些？"><a href="#12-Vue组件通讯方式有哪些？" class="headerlink" title="12. Vue组件通讯方式有哪些？"></a>12. Vue组件通讯方式有哪些？</h3><p>父子组件：<br>父组件通过 prop 属性传值给子组件，子组件通过 $emit() 触发父组件的事件进行数据传递。也可通过 $refs 获取子组件实例从而获取子组件相关数据</p><p>父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。(官方不推荐在实际业务中使用，但是写组件库时很常用)</p><p>$parent，$children 获取当前组件的父组件和当前组件的子组件</p><p>兄弟组件：<br><a href="http://localhost:4000/MyBlog/vue-bus-newsletter/">envetBus 事件总线</a> 兄弟组件数据传递</p><p>非父子组件：vuex状态管理</p><h3 id="13-Vuex"><a href="#13-Vuex" class="headerlink" title="13. Vuex"></a>13. Vuex</h3><blockquote><p>vuex 是vue的状态管理插件<br>优点：解决了非父子组件的通讯（集中管理，数据共享，及时响应页面）、减少了ajax请求有些业务数据可以存放在state 中（数据缓存）<br>缺点：浏览器刷新state会被初始化（解决方案：vue-along 、vue-persistentedstate插件）<span style="color: red">数据持久化问题</span></p></blockquote><blockquote><p>vuex 数据持久化 一般使用本地存储的方案来保存数据 可以自己设计存储方案 也可以使用第三方插件<br>推荐使用<span style="color: red"> vuex-persist 插件</span>，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中</p></blockquote><p>vuex核心：<br>● state：定义了应用状态的数据结构，用于数据存储，可以在这里设置默认的初始状态<br>● getters：基于state数据的二次包装，常用于数据的筛选和多个数据的相关性计算<br>● mutations：可以改变state中的数据，且必须是同步函数<br>● actions：异步请求<br>● modules：命名空间，将项目中的各个模块状态区分，便于维护</p><h4 id="vuex中获取的数据可以直接更改吗？"><a href="#vuex中获取的数据可以直接更改吗？" class="headerlink" title="vuex中获取的数据可以直接更改吗？"></a>vuex中获取的数据可以直接更改吗？</h4><p>不可以，从vuex中获取的数据不能直接更改，只能通过浅拷贝对象之后更改，否则报错。</p><h3 id="14-虚拟DOM优缺点"><a href="#14-虚拟DOM优缺点" class="headerlink" title="14. 虚拟DOM优缺点"></a>14. 虚拟DOM优缺点</h3><p>在浏览器中频繁操作DOM会带来很大的性能问题，而虚拟DOM的产生正是为了解决这个问题。<br>优点：</p><ol><li>保证性能下限</li><li>无需手动操作DOM，通过虚拟DOM和数据的双向绑定可以极大提高开发效率</li><li>跨平台<br>缺点：</li><li>无法进行极致优化</li><li>首次渲染大量虚拟DOM时（其中包含虚拟DOM的计算）会比较慢</li></ol><h3 id="15-Vue-SSR服务端渲染"><a href="#15-Vue-SSR服务端渲染" class="headerlink" title="15. Vue SSR服务端渲染"></a>15. Vue SSR服务端渲染</h3><blockquote><p>SSR 也就是服务端渲染，也就是将 Vue 在客户端把标签渲染成 HTML 的工作放在服务端完成，然后再把 html 直接返回给客户端<br>优点：SSR服务端渲染有着更好的SEO且首屏加载速度快<br>缺点：服务端压力大，开发条件也会受到限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子。服务端渲染应用程序也需要处于nodejs的运行环境</p></blockquote><h3 id="16-Vue中使用了哪些设计模式"><a href="#16-Vue中使用了哪些设计模式" class="headerlink" title="16. Vue中使用了哪些设计模式"></a>16. Vue中使用了哪些设计模式</h3><p>● 单例模式：整个程序有且只有一个实例。vuex 和 vue-router 的插件注册方法 install 判断如果系统存在实例就直接返回掉<br>● 发布-订阅模式：vue事件机制<br>● 观察者模式：响应式数据原理<br>● 工厂模式：传入参数可创建实例。虚拟 DOM 根据参数的不同返回基础标签的 Vnode 和组件 Vnode<br>● 装饰模式：@装饰器的用法<br>● 策略模式：策略模式指对象有某个行为,但是在不同的场景中,该行为有不同的实现方案-比如选项的合并策略<br>● … …</p><h3 id="17-Vue-修饰符"><a href="#17-Vue-修饰符" class="headerlink" title="17. Vue 修饰符"></a>17. Vue 修饰符</h3><p>事件修饰符：<br>.stop 阻止事件继续传播<br>.prevent 阻止标签默认行为<br>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理<br>.self 只当在 event.target 是当前元素自身时触发处理函数<br>.once 事件将只会触发一次<br>.passive 告诉浏览器你不想阻止事件的默认行为</p><p>v-model 的修饰符：<br>.lazy 通过这个修饰符，转变为在 change 事件再同步<br>.number 自动将用户的输入值转化为数值类型<br>.trim 自动过滤用户输入的首尾空格</p><h3 id="18-常用的指令"><a href="#18-常用的指令" class="headerlink" title="18. 常用的指令"></a>18. 常用的指令</h3><p>v-if：判断是否隐藏；<br>v-for：数据循环出来；<br>v-bind:class：绑定一个属性；<br>v-model：实现双向绑定</p><h3 id="19-自定义指令"><a href="#19-自定义指令" class="headerlink" title="19. 自定义指令"></a>19. 自定义指令</h3><blockquote><p>自定义指令有全局注册和局部注册两种方式<br>使用方式：直接在要使用的元素上写 v-dirName即可<br>指令作用：主要用于dom操作，它的一个优点是减少重复（vue的实例主要用于数据绑定、事件监听、dom更新）</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 全局注册</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'dirName'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 局部注册：直接在选项中注册</span>directives<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//注意这里要写成  directives 加了s</span>  dirName<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义权限指令（按钮、组件权限）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在main.js 中自定义权限指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'permission'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>binding <span class="token operator">||</span> <span class="token operator">!</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 获取当前登录者的权限信息(过滤按钮权限)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'aclThreeTree'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> aclTree <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'aclThreeTree'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 组件权限指令对应的值</span>    <span class="token keyword">const</span> elval <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aclTree <span class="token operator">&amp;&amp;</span> elval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> perms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      aclTree<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>          item<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              i<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">p</span> <span class="token operator">=&gt;</span> perms<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 判断当前用户是否拥有该权限，没有权限则移除组件flag = false</span>      <span class="token keyword">let</span> flag <span class="token operator">=</span> perms<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">f</span> <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> elval<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面组件使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">v-permission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>allProject:update<span class="token punctuation">'</span><span class="token punctuation">"</span></span>  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleEdit(scope.row)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>函数属性<br>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置<br>inserted：被绑定元素插入父节点时调用<br>update：所在组件的 VNode 更新时调用，<br>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用<br>unbind：只调用一次，指令与元素解绑时调用。</p><p>函数参数<br>el：指令所绑定的元素，可以用来直接操作 DOM。<br>binding： 里面包含事件信息<br>vnode：Vue 编译生成的虚拟节点。<br>oldNode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p><h3 id="20-Vue2性能优化的方法"><a href="#20-Vue2性能优化的方法" class="headerlink" title="20. Vue2性能优化的方法"></a>20. Vue2性能优化的方法</h3><p>● 路由懒加载、图片懒加载<br>● keep-alive缓存页面<br>● v-show复用DOM<br>● 使用v-for避免同时使用v-if<br>● 防止内部泄漏，组件销毁后把全局变量和事件销毁<br>● 防抖、节流<br>● v-if、v-show；computed、watch区分使用场景<br>● 第三方插件的按需引入<br>● 长列表，如果是纯数据就不做响应化；大数据场列表采用虚拟滚动，渲染少部分内容；事件销毁；子组件分割…</p><h3 id="21-Vue3有什么新特点？"><a href="#21-Vue3有什么新特点？" class="headerlink" title="21. Vue3有什么新特点？"></a>21. Vue3有什么新特点？</h3><p>● 用 Proxy 代替 Object.defineProperty 重构了响应式系统<br>● 新增 Composition API 可以更好的逻辑复用和代码组织，同一功能的代码不至于像以前一样太分散，虽然 Vue2 中可以用 minxin 来实现复用代码，但也存在问题，比如方法或属性名会冲突，代码来源也不清楚等<br>● 用 setup 代替了 beforeCreate 和 created 这两个生命周期<br>● 重构了虚拟 DOM，在编译时会将事件缓存、将 slot 编译为 lazy 函数、保存静态节点直接复用(静态提升)、以及添加静态标记、Diff 算法使用 最长递增子序列 优化了对比流程<br>● … …</p><h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><blockquote><p>Vue2 中 Options API 只能固定用 data、computed、methods 等选项组织代码，在组件越来越复杂的时候，一个功能相关的属性和方法就会在文件上中下到处都有，很分散，变越来越难维护<br>Vue2 中虽然可以用 minxin 来做逻辑的提取复用，但是 minxin 里的属性和方法名会和组件内部的命名冲突，还有当引入多个 minxin 的时候，我们使用的属性或方法是来于哪个 minxin 也不清楚<br>而 Composition API（组合式 API）可以解决 Vue2 Options API的这些问题，提高代码的可读性、便于维护扩展</p></blockquote><p><b>关于setup</b><br><span style="color: red">setup() 方法是在 beforeCreate() 生命周期函数之前执行的函数；</span>它接收两个参数 props 和 context。它里面不能使用 this，而是通过 context 对象来代替当前执行上下文绑定的对象，context 对象有四个属性：attrs、slots、emit、expose</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 方法</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">'测试'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment">// 语法糖</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span><span class="token comment">// 响应式</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'楠竹'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- <img src="./display-img.awebp" width="86%"/> --><blockquote><p>“障碍就是当你的视线离开目标时，所看到的那些可怕的东西。” —— 《巨人传》</p></blockquote><img src="https://s4.ax1x.com/2022/02/11/HU5b9O.jpg" width="45%">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JS获取地址栏参数</title>
      <link href="/MyBlog/client-js-note/"/>
      <url>/MyBlog/client-js-note/</url>
      
        <content type="html"><![CDATA[<h2 id="一、用JS获取地址栏参数"><a href="#一、用JS获取地址栏参数" class="headerlink" title="一、用JS获取地址栏参数"></a>一、用JS获取地址栏参数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 获取地址栏完整的字符串</span><span class="token keyword">let</span> urlStr <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token comment">// 2. 获取ip协议与端口</span><span class="token keyword">let</span> ip <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol <span class="token operator">+</span> <span class="token string">'//'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>host <span class="token operator">+</span> <span class="token string">'/'</span><span class="token keyword">let</span> port <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>port<span class="token comment">// 3. 获取参数部分</span><span class="token keyword">let</span> params <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token comment">// 4. 使用正则的方式来获取地址栏参数（推荐使用）</span><span class="token keyword">function</span> <span class="token function">getUrlQueryStr</span><span class="token punctuation">(</span><span class="token parameter">paramsName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'[?|&amp;]'</span> <span class="token operator">+</span> paramsName <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token string">'([^&amp;;]+?)(&amp;|#|;|$)'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'%20'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token function">getUrlQueryStr</span><span class="token punctuation">(</span><span class="token string">'参数名1'</span><span class="token punctuation">)</span><span class="token function">getUrlQueryStr</span><span class="token punctuation">(</span><span class="token string">'参数名2'</span><span class="token punctuation">)</span><span class="token operator">...</span> <span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组map()方法是否会改变原数组？</title>
      <link href="/MyBlog/client-map/"/>
      <url>/MyBlog/client-map/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-Array-map-方法"><a href="#JavaScript-Array-map-方法" class="headerlink" title="JavaScript Array map() 方法"></a>JavaScript Array map() 方法</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><blockquote><p>map() 方法使用为每个数组元素调用函数的结果创建新数组。<br>map() 方法按顺序为数组中的每个元素调用一次提供的函数。<br>注释：map() 对没有值的数组元素不执行函数。<br>注释：map() 不会改变原始数组。<br>摘自<a href="https://www.w3school.com.cn/jsref/jsref_map.asp">w3school 文档</a></p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>item <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果： [65, 44, 12, 4] // map()方法没有改变原数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'楠竹'</span><span class="token punctuation">,</span>        sex<span class="token operator">:</span> <span class="token string">'girl'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'https://leisuping.github.io/MyBlog/'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'Alisa'</span><span class="token punctuation">,</span>        sex<span class="token operator">:</span> <span class="token string">'girl'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'https://leisuping.github.io/MyBlog/'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'jason'</span><span class="token punctuation">,</span>        sex<span class="token operator">:</span> <span class="token string">'girl'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'https://leisuping.github.io/MyBlog/'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>friends<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'楠竹'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    item<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'楠竹菇凉'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'jason'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    item<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'boy'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果如下 // map()方法改变了原数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./map02.jpg"></p><p>基本数据类型的值存放在栈内存（Stack）里，是按值访问的。而引用类型的值保存在堆内存（Heap）中的，是按引用访问的。详情参见🔎<a href="https://www.runoob.com/w3cnote/javascript-basic-types-and-reference-types.html">JavaScript 深入了解基本类型和引用类型的值</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综上所述，数组的map()方法是否会改变原数组取决于原数组中的值。<br>如果数组中是基础数据类型，map()方法不会改变原数组<br>如果数组中是<span style="color: red">引用数据类型</span>，map()方法则<span style="color: red">会改变原数组</span></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请回答2021｜2021倒计时11天</title>
      <link href="/MyBlog/specialpush-please-answer2021/"/>
      <url>/MyBlog/specialpush-please-answer2021/</url>
      
        <content type="html"><![CDATA[<img src="./image03.jpg" width="60%"><blockquote><p>早上在掘金上看到这个沸点话题“请回答2021”我突然意识到2021就只剩下一个星期了，想着写点什么总结一下或是记录一些回忆📝</p></blockquote><h3 id="工作的转折"><a href="#工作的转折" class="headerlink" title="工作的转折"></a>工作的转折</h3><blockquote><p>2021年工作上最大的变化是在公司从后端转做了前端<br>本人在长沙的一个小创业公司工作，从入职的后端今年转为了全职前端，过程靠自己摸索还有“贵人”的提点<br>因为没有系统化学习过前端，所以许多技能还在”冷却中“，许多领域还未涉及比如：app、小程序、公众号…<br>虽然目前还只是刚入门，但是我未来的规划还是继续往前端发展。</p></blockquote><blockquote><p>转前端后比较大的转变就是开始注重界面的美观、注重界面性能、响应速度…<br>这些都取决于个人的审美、对业务的理解、对技术的掌握程度以及自己平时的思考<br>后期会着重提高自己这方面的能力，写优质的代码，向大佬们学习做一个有涵养的”前端攻城狮“🦁️<br>总的来说学习前端对我来说是一个巨大的挑战，来年继续应战👊</p></blockquote><h3 id="2021最美的相遇"><a href="#2021最美的相遇" class="headerlink" title="2021最美的相遇"></a>2021最美的相遇</h3><blockquote><p>最美的相遇之中国的最南端 —— 海南🌴 Serendipity～<br>今年的国庆我们来了一次说走就走的旅行，✈️9月30日那是我们与这个名为“琼”的城市第一次🌈相遇<br>我们在它的省会城市海口落地，开始了第一次自驾游旅行。<br>当天在海口的骑楼老街吃当地特色小吃、在假日海滩边吹海风听大海传来的音律🎵<br>次日我们去了电视剧小娘惹的取景地，穿上娘惹服走在街道上，不远处传来老爷车的鸣笛，回头的那一刹那仿佛自己真的穿越时空到了马来西亚…<br>傍晚我们又来到了最美的椰林，在椰林深处的海滩上捡贝壳看落日与晚霞🌆，晚上还在民宿品尝到当地特产椰子鸡🥥 …<br>后面的每一天我们都充分利用，从海口（骑楼老街、假日海滩）- 冯小刚电影公社🎬 - 东郊椰林 - 三亚（海棠湾）- 西岛 - 大小洞天 - 天涯镇<br>七天的时间我们从海口到三亚最后又回到海口，期间有太多太多美好的回忆，是今年最大的惊喜也是今年唯一的收获。<br>都说北方城市风光无限（如果下次旅行有机会我也想亲眼见识一下北方城市的大好河山），而我生在南方，亦为南方城市的风情万种折腰。</p></blockquote><img src="./image02.jpg" width="98%"><img src="./image04.jpg" width="98%"><h3 id="最遗憾的事情"><a href="#最遗憾的事情" class="headerlink" title="最遗憾的事情"></a>最遗憾的事情</h3><blockquote><p>2021年最遗憾的事情大概就是没能坚持自己的爱好💗<br>其实每年遗憾的事情都有很多，今年也不例外。原本计划好的事情，随着时间一件一件被落下。而坚持跳舞💃这个爱好其实是最小也最容易实现的一件。<br>2020年下半年，我第一次成全自己的爱好给自己办了一张舞蹈卡。狠狠的立下flag一定要坚持下去，学习了大概3个月也算小有成就<br>学习舞蹈的那段时间，是我最开心的时光。因为我把生活与工作平衡的很好，工作之外还能够做自己喜欢的事情，并且小有收获🥳<br>但今年因为各种原因，我没能够坚持去舞蹈室，退步为零基础，身体也大不如之前，下半年的体检大大小小的毛病<br>马上就快跨年了，目前这件事成为了我今年最大的遗憾…</p></blockquote><h3 id="12月的小幸运"><a href="#12月的小幸运" class="headerlink" title="12月的小幸运"></a>12月的小幸运</h3><blockquote><p>2021年最后一个月，我也有属于自己的小幸运☪️<br>我成功预约到了hpv疫苗，就在上周顺利接种第一针无不良反应哈哈哈<br>期间有过一点点小磕绊，但是最终还是约上了。嘻嘻，最后希望大家都能在本月收获好运🍀</p></blockquote><blockquote><p>💓 最后，愿我们能做自己的勇士，热爱生活，披荆斩棘无所不能</p></blockquote><img src="./image01.jpg" width="50%" title="一个有海风吹过棕榈树的夏天～☀️">]]></content>
      
      
      <categories>
          
          <category> nzgl回忆录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> special push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的处理前端一些小问题（一）</title>
      <link href="/MyBlog/client-written-exam/"/>
      <url>/MyBlog/client-written-exam/</url>
      
        <content type="html"><![CDATA[<h2 id="一、故事分享"><a href="#一、故事分享" class="headerlink" title="一、故事分享"></a>一、故事分享</h2><blockquote><p>🎯 之前有分享过一些理论知识<a href="https://leisuping.github.io/MyBlog/client-tips/">卑微小前端每日一个“离职”小技巧</a>今天我们来聊一些硬核一点的技术点<br>📝小编也是初级入门前端如有理解不当请各位大佬海涵哦！😯</p></blockquote><h2 id="二、进入正题"><a href="#二、进入正题" class="headerlink" title="二、进入正题"></a>二、进入正题</h2><h3 id="1-new-的实现"><a href="#1-new-的实现" class="headerlink" title="1. new 的实现"></a>1. new 的实现</h3><p>前提：了解js原型与原型链，可阅读<a href="https://leisuping.github.io/MyBlog/facial-meridian-two/">js基础篇之“深入浅出”</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 1.获取构造函数 * 2.创建新的对象 * 3.将新对象的_proto_指向构造函数的prototype * 4.执行构造函数（为新对象添加属性跟方法）将构造中的this指向新对象 * 5.判断函数的返回类型，如果是值类型，返回创建的对象。如果是引用类型，返回这个引用类型的对象。 * @returns */</span><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> Constructor <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>_proto_ <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-call-的实现"><a href="#2-call-的实现" class="headerlink" title="2. call 的实现"></a>2. call 的实现</h3><p>前提：了解js的this指向，可阅读<a href="https://leisuping.github.io/MyBlog/facial-meridian-two/">js基础篇之“深入浅出”</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 1.获取上下文 * 2.重置上下文 * 3.截取参数 * 4.执行函数 * 5.删除属性避免污染 * 6.返回结果 * @param {*} context  * @returns  */</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  context <span class="token operator">=</span> context <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">:</span> window<span class="token punctuation">;</span>  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-对象的深浅拷贝"><a href="#3-对象的深浅拷贝" class="headerlink" title="3. 对象的深浅拷贝"></a>3. 对象的深浅拷贝</h3><blockquote><p>关于对象的深浅拷贝<br>浅拷贝：<br>1.Object.assign(target,source)<br>2.es6对象扩展运算符<br>深拷贝：递归调用/序列化</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 递归拷贝(简单版) * 1.判断obj是否为一个对象 * 2.创建一个新对象，赋值为空 * 3.循环obj对象，获取对象自身的属性值，并赋值给新对象（如果对象的属性值为'object'进入新一轮的拷贝） * 4.返回新对象 * @param obj  * @returns  */</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> newObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断对象是否包含自身属性（非继承）</span>      newObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 序列化：JSON.stringify()序列化转为字符串，通过JSON.parse()再将其转为对象，最终得到的对象即为深拷贝的对象</span><span class="token comment">//（简单数据结构的对象可以通过此方法实现深拷贝）</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归拷贝(复杂版)<a href="https://juejin.cn/post/6946022649768181774">来源于网络 原文链接</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 获取当前值的构造函数：获取它的类型</span>  <span class="token keyword">let</span> constructor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>  <span class="token comment">// 检测当前对象target是否与正则、日期格式对象匹配</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(RegExp|Date)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 创建一个新的特殊对象(正则类/日期类)的实例</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">constructor</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为循环引用的对象做标记</span>    <span class="token keyword">const</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cloneTarget<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数组去重、数组扁平化、一维数组转二维数组"><a href="#4-数组去重、数组扁平化、一维数组转二维数组" class="headerlink" title="4. 数组去重、数组扁平化、一维数组转二维数组"></a>4. 数组去重、数组扁平化、一维数组转二维数组</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 补充：普通一维数组可以通过Set来实现去重</span><span class="token keyword">function</span> <span class="token function">unique</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或者 [...new Set(arr)];</span><span class="token punctuation">}</span><span class="token comment">// 数组去重以及扁平化处理：</span><span class="token comment">// 方法一（普通递归 + concat：因为方法返回的是数组，所以要用concat拼接）</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 方法二（reduce + concat）</span><span class="token keyword">function</span> <span class="token function">flatten1</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten1</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">:</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 一维数组转二维数组</span><span class="token comment">/** * oneArray： 要分割的一维数组 * num： 几个为一个数组的数量 */</span><span class="token keyword">function</span> <span class="token function">oneTransTwo</span><span class="token punctuation">(</span><span class="token parameter">oneArray<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> oneArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> num <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>v<span class="token punctuation">,</span> <span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      v<span class="token punctuation">[</span>v<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      r <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-获取数组中最大值"><a href="#5-获取数组中最大值" class="headerlink" title="5. 获取数组中最大值"></a>5. 获取数组中最大值</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 方法一 * 利用es6新增的扩展运算符Math.max()方法获取最大值 * @param {*} arr  * @returns  */</span><span class="token keyword">function</span> <span class="token function">getMax2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 方法二 * 使用数组的sort排序方法 * @param {*} arr  * @returns  */</span><span class="token keyword">function</span> <span class="token function">getMax1</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 方法三 * 定义一个最大值max（预设数组中的一个值） * 遍历数组，与变量max比较，max小则将较大的值赋值给max * 最终返回max * @param {*} arr 数组 * @returns max返回数组中的最大值 */</span><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-快速排序与冒泡排序"><a href="#6-快速排序与冒泡排序" class="headerlink" title="6. 快速排序与冒泡排序"></a>6. 快速排序与冒泡排序</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 快速排序：（不稳定） * 原理：首先是从数组中找出最小的元素放在最前面，然后从剩下的元素中挑出最小的排在第一次的最小值后面，以此类推，直到排序完毕。 * 时间复杂度：最好的情况（n）；最差的情况（n*n） *  * 冒泡排序：（稳定） * 原理：依次比较相邻的两个值，如果后面的值比前面的值小，则将比较小的元素排在前面， * 时间复杂度：最好的情况（n*n）；最差的情况（n*n） *  * 时间复杂度：算法执行所需要的耗时 * 空间复杂度：算法执行所需的内存大小 * 稳定：如果a=b，a在b的前面，排序后a还是在b的前面 * 不稳定：如果a=b，a在b的前面，排序后可能会交换位置 */</span><span class="token comment">// 快速排序</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token keyword">var</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 冒泡排序</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token comment">// quickSort(arr);</span><span class="token comment">// sort(arr)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s4.ax1x.com/2021/12/17/TFqTOS.jpg" width="98%"><blockquote><p>最近在看一部动漫《国王排名》被波吉的毅力与勇气感动到，当然还有卡克的善良与忠诚 …<br>希望我们也能有永恒的毅力与勇气面对未来！加油💪</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> prototype </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> prototype </tag>
            
            <tag> constructor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将hexo搭建的个人博客部署到GitHub</title>
      <link href="/MyBlog/build-blog-two/"/>
      <url>/MyBlog/build-blog-two/</url>
      
        <content type="html"><![CDATA[<h2 id="一、新建仓库"><a href="#一、新建仓库" class="headerlink" title="一、新建仓库"></a>一、新建仓库</h2><blockquote><p>🎯 上一篇<a href="https://leisuping.github.io/MyBlog/build-blog-one/">如何使用hexo搭建个人博客</a>中准备环境有提到要注册GitHub/GitLab账号<br>今天我们要登录GitHub新建博客仓库，准备将博客部署到GitHub Pages</p></blockquote><p><img src="./github01.jpg"></p><p>1.登入 github 账号<br>2.New repository 在 github 新建一个名为：username用户名.github.io 的 Repository（我这里在用户名下建了一个与本地博客同名的目录）<br>3.注意要公开仓库，私有库是无法访问的（GitHub Pages 在公共存储库中可用）<br>4.建议选择使用 README 初始化此存储库</p><p><img src="./github02.jpg"></p><h2 id="二、配置博客"><a href="#二、配置博客" class="headerlink" title="二、配置博客"></a>二、配置博客</h2><blockquote><p>copy GitHub博客仓库的地址 <a href="https://github.com/leisuping/">https://username.github.io/MyBlog</a><br>在博客根目录下的 _config.yml 中配置 GitHub 仓库地址（博客部署/访问的地址）</p></blockquote><h3 id="1-博客部署地址相关配置"><a href="#1-博客部署地址相关配置" class="headerlink" title="1.博客部署地址相关配置"></a>1.博客部署地址相关配置</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">url: https://username.github.io/root: /BlogNamepermalink: :title/permalink_defaults:pretty_urls:  trailing_index: true # 是否在永久链接中保留尾部的 index.html，设置为 false 时去除  trailing_html: true # 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 配置博客静态文件部署地址，分支deploy:  type: git  repo: git@github.com: username/BlogName  branch: gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-博客样式相关配置"><a href="#2-博客样式相关配置" class="headerlink" title="2.博客样式相关配置"></a>2.博客样式相关配置</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 中文链接转拼音permalink_pinyin:  enable: true  separator: '-'# 添加emoji表情支持githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:# 博客搜索# 安装搜索插件：npm install hexo-generator-search --savesearch:  path: search.xml  field: post# 安装动画插件：npm install live2d-widget-model-z16 -D# 安装具体的动画人物：npm install --save hexo-helper-live2d # 配置博客动漫人物（动画跟不蒜子统计会有冲突，建议两者不要一起使用）live2d:   enable: true   scriptFrom: local   pluginRootPath: live2dw/   pluginJsPath: lib/   pluginModelPath: assets/   tagMode: false   log: false   model:     use: live2d-widget-model-tororo # live2d-widget-model-shizuku # live2d-widget-model-z16  display:     position: right     width: 150     height: 300   mobile:     show: true     react:       opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的一些配置根据主题，可能会有些略微不同，大家参考主题下的 README_CN.md 说明文件配置就好啦！</p><h2 id="三、上传部署博客"><a href="#三、上传部署博客" class="headerlink" title="三、上传部署博客"></a>三、上传部署博客</h2><blockquote><p>1.将本地的 myblog 与 GitHub仓库关联（配置ssh），将代码提交到仓库的 master分支下<br>2.在博客仓库下新建 gh-pages 分支，用来存储博客编译后要部署的静态文件<br>3.在仓库下配置发布源 Settings =&gt; Pages 在 GitHub Pages 下设置发布源分支 gh-pages<br>4.在 _config.yml 中配置博客部署信息</p></blockquote><p><img src="./githubPages.jpg"></p><p>配置博客部署信息</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repo: git@github.com:username/MyBlog  branch: gh-pagessearch:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好之后，重新构建博客生成静态文件并部署到 GitHub Pages</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx hexo clean$ npx hexo g$ npx hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="./hexo02.jpg"></p><p>部署成功之后就可以直接访问你的博客啦！<br><a href="https://leisuping.github.io/MyBlog/">https://username.github.io/MyBlog</a></p><img src="https://s6.jpg.cm/2021/12/08/LdjVpU.gif" width="200px">]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 部署博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用hexo搭建个人博客</title>
      <link href="/MyBlog/build-blog-one/"/>
      <url>/MyBlog/build-blog-one/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><blockquote><p>🎯 作为一个码农，除了每日“搬砖”偶尔也会去网上看看博客吸收一点点技术精华。<br>慢慢的自己也有想法想要搭建属于自己的博客，虽然现在有许多技术网站都挺活跃的，但是还是想尝试一下做一个只属于自己的博客。<br>下面记录了个人博客搭建到部署的流程步骤，如果能够帮助到大家的话那就更好啦！</p></blockquote><h2 id="二、准备环境"><a href="#二、准备环境" class="headerlink" title="二、准备环境"></a>二、准备环境</h2><blockquote><p>安装 git<br>安装 nodejs(建议使用 Node.js 12.0 及以上版本)<br>安装 hexo（我这里是局部安装的hexo，所以用的npx执行的相关命令，如果是全局安装就不用npx来执行hexo命令）<br>注册GitHub账户/GitLab账户</p></blockquote><h3 id="1-安装-git"><a href="#1-安装-git" class="headerlink" title="1.安装 git"></a>1.安装 git</h3><blockquote><p>安装 git 的目的：<br>a.方便我们建站后获取一些hexo的资源，比如：主题、模板、插件等<br>b.上传代码，更新本地代码到GitHub或者GitLab上</p></blockquote><p><a href="http://git-scm.com/downloads">git安装包下载地址</a><br><a href="http://git-scm.com/docs">git命令大全</a></p><p>1.Windows平台上安装 git<br><a href="https://gitforwindows.org/">安装包下载地址</a><br><a href="https://npm.taobao.org/mirrors/git-for-windows/">国内淘宝镜像</a></p><p><img src="./git01.jpg"></p><p>2.Mac平台上安装 git<br><a href="http://sourceforge.net/projects/git-osx-installer/">安装包下载地址</a></p><p><img src="./git02.jpg"></p><p>3.配置git<br>安装好git之后可以在命令面板修改git配置信息（详细步骤可按照提示一步一步进行）<br>使用命令配置好git的用户名称和电子邮件地址（密码自己根据提示设置哦！）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"username"</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token number">1234567890</span>@qq<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看配置信息</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">$ git config <span class="token operator">--</span>list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装-nodejs"><a href="#2-安装-nodejs" class="headerlink" title="2.安装 nodejs"></a>2.安装 nodejs</h3><blockquote><p>安装nodejs<br>node.js 是基于 Chrome V8 引擎的 JavaScript 运行环境，做前端的小伙伴们应该都知道且安装了nodejs环境。<br>当然看过hexo官方文档的小伙伴们一定也有了解到，hexo也是基于nodejs构建的。<br>所以还没有安装过nodejs的小伙伴可以行动起来了哟！（有想法搭建博客或者学习前端的）</p></blockquote><p><a href="https://nodejs.org/en/download/">Node.js 安装包及源码下载地址</a></p><p><img src="./nodejs01.jpg"></p><p>选择LTS 也就是长期支持版，大家可以根据自己本地的环境下载不同平台的版本。(注意要下载安装 Node.js 12.0 及以上版本哦！)<br>按照提示的步骤，点击“下一步”，完成nodejs的安装。<br>安装成功后查看nodejs 与 npm版本（Windows平台上安装完 nodejs系统会自动配置好环境变量）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 查看nodejs版本</span>node <span class="token operator">-</span>v<span class="token comment">// 查看npm版本</span>npm <span class="token operator">-</span>v<span class="token comment">// 能够查到版本信息即安装成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./nodejs02.jpg"></p><h3 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3.安装 Hexo"></a>3.安装 Hexo</h3><blockquote><p>Hexo 就不用我做过多的解释啦！如果你要搭建一个博客，那么 Hexo 或许是个不错的选择。<br>”Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。“<br><a href="https://hexo.io/zh-cn/docs/">摘自 Hexo 官方文档</a></p></blockquote><p>打开终端使用 npm 命令安装hexo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">$ npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli<span class="token comment">// 或者</span>$ npm install hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>两者的区别是第一个是全局安装，第二个是局部安装。因为我只有在博客工作区间用到hexo，所以我采用的是局部安装的方式。<br>在博客工作区间下执行命令“npm install hexo”局部安装hexo</p></blockquote><h3 id="4-注册GitHub账户"><a href="#4-注册GitHub账户" class="headerlink" title="4.注册GitHub账户"></a>4.注册GitHub账户</h3><blockquote><p>注册GitHub账户或者GitLab账户目的：<br>a.代码托管<br>b.部署博客</p></blockquote><p>访问<a href="https://github.com/">GitHub 地址</a>注册一个账户<br>或者<br>访问<a href="https://about.gitlab.com/">GitLab 地址</a>注册一个账户<br>注册账户步骤就不详细说明啦！</p><p>配置SSH key<br>setting -&gt; SSH and GPG keys -&gt; New SSH key<br><img src="./ssh.jpg" alt="配置SSH key"></p><h2 id="三、搭建博客"><a href="#三、搭建博客" class="headerlink" title="三、搭建博客"></a>三、搭建博客</h2><h3 id="1-初始化博客"><a href="#1-初始化博客" class="headerlink" title="1.初始化博客"></a>1.初始化博客</h3><p>首先在本地建一个目录作为博客的工作区间，我在本地建了一个 BlogSpace 文件夹作为博客工作区间。<br>进入到 BlogSpace 目录下，执行命令:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 局部安装 hexo</span>$ npm i hexo <span class="token operator">--</span>save<span class="token comment">// 初始化博客 myblog（执行命令后会在 BlogSpace 目录下自动构建一个 myblog 项目）</span>$ npx hexo init myblog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动博客</span>npx hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构建好博客之后的目录：<br><img src="./myblog01.jpg"></p><blockquote><p>source：资源文件夹是存放用户资源的地方，_posts 文件夹下一般存放博客文章。<br>themes：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹，Hexo 会根据主题来生成静态页面。<br>_config.yml：根目录下_config.yml用于当前博客全局配置。<br>package.json：根目录下的 package.json 是博客的一些依赖，以及 Hexo 相关配置。<br>比如：（启动博客命令）npx hexo serve</p></blockquote><p>本地运行博客效果图如下：<br><img src="./hexo.jpg"></p><h3 id="2-配置博客"><a href="#2-配置博客" class="headerlink" title="2.配置博客"></a>2.配置博客</h3><blockquote><p>博客的相关配置均在 根目录下的 _config.yml 文件中配置。<br>配置博客基本信息：</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 配置博客标题、描述、关键字、作者、语言（基础配置）title: 楠竹菇凉subtitle: 楠竹description: 当然，还是会有不可逾越的界限keywords: "楠竹菇凉"author: nzgllanguage: zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置博客主题：<br>关于博客的主题可以参见<a href="https://hexo.io/themes/">主题列表</a>，当然如果自己有更好的主题也可以发布在主题列表分享。<br>在<a href="https://hexo.io/themes/">主题列表</a>选一个自己喜欢的主题 “git clone 主题资源GitHub路径” 到博客根目录下的 themes 文件夹里。<br>然后在博客根目录下的 _config.yml 配置文件里面配置 “theme: 主题名称” 即可。</p></blockquote><p><img src="./themes.jpg"></p><p>在博客根目录下的 themes 文件夹里拉取主题资源（也可以拉取主题copy到 themes 目录里）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/ptsteadman/hexo-theme-corporate.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># _config.yml 配置文件里面配置应用主题名称# theme: https://hexo.io/themes/theme: hexo-theme-corporate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>关于博客其他配置可以仔细阅读<a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a><br>可以按照个人的喜好风格来配置，这里就请大家自由发挥吧～（下次我再跟大家分享 如何将博客到GitHub上）<br>相信大家都能够搭建一个独具特色的个人博客！</p></blockquote><img src="https://s6.jpg.cm/2021/12/08/LdjSpC.jpg" width="200px">]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础篇之“深入浅出”</title>
      <link href="/MyBlog/facial-meridian-two/"/>
      <url>/MyBlog/facial-meridian-two/</url>
      
        <content type="html"><![CDATA[<h2 id="一、原型链"><a href="#一、原型链" class="headerlink" title="一、原型链"></a>一、原型链</h2><blockquote><p>🎯 每个实例都有私有的_proto_属性指向它的原型对象。<br>而每个原型对象也有自己的_proto_属性指向更高层的原型对象，直到指向的原型对象为null。<br>这样一个过程所构成的链路就被称为原型链。（原型与原型层层相连接的过程就叫做原型链）</p></blockquote><p>p 是实例对象，Person是 p 的构造函数<br>p 的 <em>proto</em> 属性指向 构造函数 Person 的原型。<br>每个原型都有一个 constructor 属性，指向该关联的构造函数。<br>构造函数都有一个 prototype 属性指向实例原型。（所有的构造函数都是Function的实例）</p><p><img src="./person.png"></p><p>除了 Object 的 prototype 的原型是 null 外，所有的对象 和 原型 都有自己的原型，对象的原型 指向 原型对象。</p><p>作用：可以共享方法</p><p>在构造函数中定义的属性与方法可以被实例继承，但是不能被共享。而原型XXX.prototype.say()定义的方法可以被实例共享。<br>（这个时候原型对象还是有constructor构造的this指向constructor本身，如果是XXX.prototype = {}给原型重新赋值，就会丢失构造，需要手动定义构造并将this指向构造函数本身。一般是不允许直接改变原型指向的）</p><h2 id="二、构造函数"><a href="#二、构造函数" class="headerlink" title="二、构造函数"></a>二、构造函数</h2><h3 id="构造函数的特点"><a href="#构造函数的特点" class="headerlink" title="构造函数的特点"></a>构造函数的特点</h3><p>● 构造函数的首字母大写<br>● 构造函数的this指向将要创建的新对象<br>● 构造函数通过new 来创建新对象<br>● 构造函数可以通过原型对象添加方法</p><p>● class类所有的方法都定义在类的prototype属性上<br>● class类创建的实例，里面也有_proto_指向类的prototype原型对象<br>● es6语法糖（语法糖只是为了增强代码可读性）</p><h3 id="new的实现"><a href="#new的实现" class="headerlink" title="new的实现"></a>new的实现</h3><ol><li>创建一个新对象，用作返回的实例</li><li>获取构造函数，并且将新对象的_proto_属性指向构造的原型对象</li><li>执行构造函数，将构造中的属性值赋值给新对象，this指向新对象</li><li>返回新对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// new的实现</span><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> Constructor <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>_proto_ <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h2><h3 id="继承的实现方式"><a href="#继承的实现方式" class="headerlink" title="继承的实现方式"></a>继承的实现方式</h3><ol><li>原型链继承：通过修改子类的原型为父类的实例<br>a. 实现方式：Child.prototype = new Parent();或者Child.prototype = Child.prototype;<br>b. 优点：易于实现，所创建的实例是子类的实例也是父类的实例<br>c. 缺点：来自原型对象所有属性会被实例共享，其中一个实例修改会导致其他实例的这个属性也被修改。无法多继承，无法向父类构造传参。</li><li>构造函数继承：通过new<br>a. 优点：解决了原型链继承方法共享的问题，可以调用父类的构造给构造传参，实现了多继承<br>b. 缺点：所有的方法都定义在构造函数中，每次都需要重新创建，无法函数复用，影响性能</li><li>组合继承：结合原型链继承跟构造继承<br>a. 优点：多继承<br>b. 缺点：父构造函数被调用了两次</li><li>拷贝继承</li><li>实例继承</li><li>寄生组合继承</li></ol><h2 id="四、闭包"><a href="#四、闭包" class="headerlink" title="四、闭包"></a>四、闭包</h2><blockquote><p>能够访问另一函数作用于中变量的函数<br>优点：避免全局变量的污染<br>缺点：闭包的变量不会被回收，占用内存</p></blockquote><h2 id="五、this指向"><a href="#五、this指向" class="headerlink" title="五、this指向"></a>五、this指向</h2><h3 id="1-this指向"><a href="#1-this指向" class="headerlink" title="1.this指向"></a>1.this指向</h3><p>● 全局环境作用域：this指向window<br>● 自执行函数（匿名函数）：this指向window<br>● 函数环境作用域：this指向当前函数<br>● 对象中的方法函数调用：this指向该方法所属对象<br>● 通过事件绑定的方法：this指向绑定事件的对象<br>● 构造函数：this指向新对象<br>● 箭头函数：this指向父级对象，this是在定义函数时绑定的，不是执行过程中绑定的，且call()、apply()、bind()对于箭头函数来说只是参数，对this的指向没有影响。</p><blockquote><p>总结：<br>直接调用，指向window<br>函数里调用，指向window<br>对象方法里调用，指向对象<br>构造里调用，指向new创建的新对象</p></blockquote><h3 id="2-call、apply、bind改变this指向"><a href="#2-call、apply、bind改变this指向" class="headerlink" title="2.call、apply、bind改变this指向"></a>2.call、apply、bind改变this指向</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 示例</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里直接调用，this指向window。打印结果为：1，2undefined</span><span class="token comment">// 更改this指向</span><span class="token comment">// call()</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// this指向person对象，直接传参，调用函数，打印结果：4，5zs</span><span class="token comment">// apply()</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this指向person对象，数组传递参数，调用函数，打印结果：4，5zs</span><span class="token comment">// bind()</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this指向person对象，函数不调用，没有打印信息。</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this指向person对象，调用函数，打印结果：4，5zs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>相同点：<br>● 都可以改变this的指向<br>不同点：<br>● call 与 apply会调用函数，并且改变函数内this的指向，只是传参不同。call是单个传参，apply可以传数组。<br>● bind 不会调用函数，参数也是一个一个传。</p><p>使用场景：<br>● call 常用来做继承<br>● apply 跟数组有关系，比如数组最大值最小值<br>● bind 改变this指向，不调用函数。比如：改变定时器内部的this指向</p><h3 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h3><p>词法作用域：在定义时的作用域中运行而不是在执行它们的作用域中运行<br>局部作用域：在函数内声明的变量，可以在整个函数使用范围内使用以及复用（函数作用域）<br>块级作用域：在变量声明的代码之外是不可见的，比如{}在if{}、 for{}内</p><p>变量作用域<br>全局变量：在全局作用域的变量，只有在浏览器关闭的时候才会销毁，比较占内存<br>局部变量：函数内部使用，函数执行完毕就销毁（闭包内的变量除外）</p><h2 id="六、箭头函数"><a href="#六、箭头函数" class="headerlink" title="六、箭头函数"></a>六、箭头函数</h2><h3 id="1-箭头函数特点"><a href="#1-箭头函数特点" class="headerlink" title="1.箭头函数特点"></a>1.箭头函数特点</h3><p>● 箭头函数不可作为构造，不能使用 new<br>● 箭头函数没有自己的 this<br>● 箭头函数没有 arguments<br>● 箭头函数没有原型对象</p><blockquote><p>暂时就这么多啦！等我想到了再来分享给大家！<br><img src="https://s6.jpg.cm/2021/12/07/LQygfH.png" width="200px"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 原型链、作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一定要懂的js基础，你会了吗？</title>
      <link href="/MyBlog/facial-meridian-one/"/>
      <url>/MyBlog/facial-meridian-one/</url>
      
        <content type="html"><![CDATA[<h2 id="一、EventLoop事件循环"><a href="#一、EventLoop事件循环" class="headerlink" title="一、EventLoop事件循环"></a>一、EventLoop事件循环</h2><blockquote><p>🎯 js是一个单线程脚本语言。<br>在执行比较耗时的任务时很容易导致线程阻塞，导致页面卡顿的情况。为了解决这个问题就有了 eventLoop 事件循环。<br>eventLoop 将js线程中的任务分为：宏任务、微任务。<br>在任务进入执行栈后，会先判断是否为宏任务，宏任务进入主线程中执行，微任务进入微任务队列等待执行。<br>宏任务执行结束（就已经确保宏任务栈空了）再判断微任务栈是否有微任务需要执行。</p></blockquote><p><img src="./stack.png"></p><h3 id="1-宏任务macro-task、微任务micro-task"><a href="#1-宏任务macro-task、微任务micro-task" class="headerlink" title="1.宏任务macro-task、微任务micro-task"></a>1.宏任务macro-task、微任务micro-task</h3><ol><li>宏任务：js整体代码、setTimeout、setInterval … …</li><li>微任务：promise … …（回调、需要耗时的）<br>补充：虽然 setTimeout 是宏任务但是它的回调会被放入微任务队列中。<br>虽然 promise 是微任务，但是new Promise会立即执行，回调会放入微任务栈中。</li></ol><p><img src="./task.png"><br><img src="./evenloop.png"></p><h2 id="二、Promise异步解决方案"><a href="#二、Promise异步解决方案" class="headerlink" title="二、Promise异步解决方案"></a>二、Promise异步解决方案</h2><blockquote><p>🎯 Promise是js中的一种异步解决方案。<br>支持链式调用 .then() .catch() .finally()，解决了传统异步解决方案（ajax）回调地狱的问题。（缺点：所有的错误/异常需要在回调函数catch中捕获处理）<br>promise函数自带两个参数resolve、reject，异步请求成功执行resolve，失败执行reject。</p></blockquote><h3 id="1-promise三种状态（状态发生变化后不可逆）"><a href="#1-promise三种状态（状态发生变化后不可逆）" class="headerlink" title="1.promise三种状态（状态发生变化后不可逆）"></a>1.promise三种状态（状态发生变化后不可逆）</h3><p>● Pending 初始状态，进行中<br>● Resolved（fulfilled） 已完成，成功<br>● Rejected 已失败</p><h3 id="2-promise链"><a href="#2-promise链" class="headerlink" title="2.promise链"></a>2.promise链</h3><p>promise的每一个链式调用都会返回一个新的promise对象，又可以接着使用.then() .catch() 由此形成promise链。在 then 中使用了return，那么return的值会被promise.resolve() 包装。</p><p><img src="./promise1.png"></p><h3 id="3-promise-all-与promise-race"><a href="#3-promise-all-与promise-race" class="headerlink" title="3.promise.all()与promise.race()"></a>3.promise.all()与promise.race()</h3><ol><li>promise.all() 并发执行多个任务，所有任务都执行完成才进入回调。</li><li>promise.race() 只要有一个任务完成，就执行回调得到结果。<br>补充：<br>then() 得到异步成功的信息，返回promise对象可以继续调用下一个then()<br>catch() 得到异步失败的信息，返回promise对象可以继续调用下一个then()<br>finally() 无论成功失败都执行，返回promise对象可以继续调用下一个then()</li></ol><p>补充：关于宏任务、微任务执行顺序<br><img src="./promise.png"></p><p>执行顺序<br>1、js代码、new Promise内容（promise构造内的代码是立即执行的）<br>2、new Promise 回调（then函数在promise.resolve()后执行）<br>3、setTimeout 回调<br>4、new Promise 里面的setTimeout 回调</p><p>new Promise 会立即执行，then()、catch()、finally()等回调会被放在微任务队列中后执行。（会先于setTimeout的回调）</p><h2 id="三、Async、Await"><a href="#三、Async、Await" class="headerlink" title="三、Async、Await"></a>三、Async、Await</h2><blockquote><p>🎯 async/await 也是js中异步的解决方案，更进一步优化了异步代码块。<br>其原理就是generator 加上了promise语法糖，内部实现了自动执行generator。</p></blockquote><h3 id="1-Async、Await的特点"><a href="#1-Async、Await的特点" class="headerlink" title="1.Async、Await的特点"></a>1.Async、Await的特点</h3><p>async返回的是一个promise对象，而await就是等promise的结果返回后再执行。（await接收的就是promise返回的结果，后面不一定要使用.then）<br>async 标记当前代码块为异步，await则是将异步变为同步（.then的语法糖，返回promise对象）</p><p>await只能在async函数中，不能单独使用。</p><p>优点：<br>1、简洁明了<br>2、可以结合promise进行异步的处理</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Tip1</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'api/v3/batchadd'</span><span class="token punctuation">,</span> objarray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data2 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'api/v3/batchadd2'</span><span class="token punctuation">,</span> objarray2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里也可以做一些别的处理</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 其他的逻辑处理</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 处理异常</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tip2</span><span class="token comment">// 也可以在async中使用try catch来处理异常</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'api/v3/batchadd'</span><span class="token punctuation">,</span> objarray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> data2 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'api/v3/batchadd2'</span><span class="token punctuation">,</span> objarray2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里也可以做一些别的处理</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 处理异常</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 也可以用promise.race(test1, test2);实现。（并发执行可以使用promise.all() 来实现）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卑微小前端每日一个“离职”小技巧</title>
      <link href="/MyBlog/client-tips/"/>
      <url>/MyBlog/client-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><blockquote><p>🎯 “不积跬步无以至千里，不积小流无以成江海”<br>每天收集一个小技巧，或许在很久的将来你也可以是大神。<br>本文主要收录一些面试的基础题，还有平时常用的一些小方法，如有描述错误请各位大佬指正！</p></blockquote><h2 id="二、步入正题CSS篇"><a href="#二、步入正题CSS篇" class="headerlink" title="二、步入正题CSS篇"></a>二、步入正题CSS篇</h2><blockquote><p>首先，简单了解一下浏览器的渲染过程：<br>1.解析javascript，构建DOM树<br>2.解析css/style，构建渲染树<br>3.layout 布局<br>4.paint 绘制<br>5.composite 渲染层合成</p></blockquote><h3 id="1-如何解决高度塌陷"><a href="#1-如何解决高度塌陷" class="headerlink" title="1.如何解决高度塌陷"></a>1.如何解决高度塌陷</h3><p>高度塌陷：本该在父盒子内部的元素跳到了外面<br>为什么会出现高度塌陷？父元素没有设置足够的大小，而子元素设置了浮动</p><p>如何解决高度塌陷的问题？</p><ol><li>简单粗暴，直接设置父元素的宽高直到适合为止。缺点：非自适应，浏览器窗口直接影响用户体验。</li><li>父元素添加浮动，方便。缺点：对布局不友好，不易维护。</li><li>父元素添加overflow属性<br>a. overflow：auto 可能会出现滚动条，页面不美观<br>b. overflow：hidden 可能会给内容带来不可见问题</li><li>父盒子里最下方引入清除浮动块，最简单的：<br style="clear:both;"> 缺点：引入了冗余的代码块</li><li>父盒子设置after伪类，在伪类中添加clear：both 属性，清除浮动。（推荐）<pre class="line-numbers language-html" data-language="html"><code class="language-html">#parent:after{    clear: both;    width: 0;    height: 0;    display: block;    visibility: hidden；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>补充：清除浮动伪类有.clearfix clear:both overflow:hidden<br>常用：.clearfix</p></blockquote></li></ol><h3 id="2-CSS显示与隐藏的实现方式有哪些？区别在哪？"><a href="#2-CSS显示与隐藏的实现方式有哪些？区别在哪？" class="headerlink" title="2.CSS显示与隐藏的实现方式有哪些？区别在哪？"></a>2.CSS显示与隐藏的实现方式有哪些？区别在哪？</h3><p>实现方式：<br>a.display[none]：不占位隐藏，会导致页面回流重绘，绑定事件无效<br>b.visibility[hidden]：占位隐藏，可能会导致页面重绘，绑定事件无效<br>c.opacity[设置透明度为0]：内部元素都会受影响，可以被继承，绑定事件仍有效<br>d.rgb[设置透明度]：只作用于当前元素，不可被继承</p><h3 id="3-使用css画三角形"><a href="#3-使用css画三角形" class="headerlink" title="3.使用css画三角形"></a>3.使用css画三角形</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mydiv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 设置div边框颜色（上、右、下、左）下边框为红色，其他边框设为透明 */</span>    <span class="token selector">#mydiv</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 15px solid<span class="token punctuation">;</span>        <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent red transparent<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：</p><div id="mydiv"></div><p></p><style>    #mydiv {        width: 0;        height: 0;        border: 20px solid;        border-color: transparent transparent red transparent;    }</style><h3 id="4-水平-垂直居中"><a href="#4-水平-垂直居中" class="headerlink" title="4.水平/垂直居中"></a>4.水平/垂直居中</h3><p>水平居中：<br>行内元素水平居中 text-align:center;</p><p>块级元素水平居中<br>定宽（width固定）设置 margin:0 auto 即可;<br>不定宽：<br>a. 设置display:flex,justify-content:center;<br>b. 设置display:table,且margin:0 auto<br>c. 设置position + transform 或者position + margin:0 auto;等</p><p>垂直居中：<br>单行元素垂直居中：<br>a. 设置行高=高 line-height = height;<br>b. 设置上下内边距相等 paddingtop = paddingbottom;<br>块级/多行元素垂直居中：<br>a. 设置父元素 display: flex;align-items: center;<br>b. 设置父元素 display: table-cell;vertical-align: middle;<br>c. 设置父元素 position的属性值等等</p><h3 id="5-水平垂直居中"><a href="#5-水平垂直居中" class="headerlink" title="5.水平垂直居中"></a>5.水平垂直居中</h3><p>推荐 position定位 与 flex布局</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token comment">/* 设置父元素display属性值为flex，并设置子元素水平居中 */</span><span class="token selector">#parent</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 或者设置元素本身position的属性值为absolute */</span><span class="token selector">#mydiv</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-左中右布局实现方式"><a href="#6-左中右布局实现方式" class="headerlink" title="6.左中右布局实现方式"></a>6.左中右布局实现方式</h3><ol><li>浮动布局，左浮动，右浮动，中间自动填充。</li><li>绝对定位 position<br>a. 左边元素position：absolute；left：0；<br>b. 右边元素position：absolute；right：0；<br>c. 中间元素position：absolute；left：300px;right：300px;</li><li>flex布局<br>a. 父元素display: flex；<br>b. 左右子元素width: 300px;<br>c. 中间子元素flex: 1;</li><li>table布局<br>a. 父元素width: 100%;display: table;<br>b. 左右子元素display: table-cell;width: 300px;</li><li>grid布局(设置父元素)<br>width: 100%;<br>display: grid;<br>grid-template-rows: 100;<br>grid-template-columns: 300px auto 300px;</li></ol><h3 id="7-一行文本超出显示…"><a href="#7-一行文本超出显示…" class="headerlink" title="7.一行文本超出显示…"></a>7.一行文本超出显示…</h3><pre class="line-numbers language-none"><code class="language-none">overflow: hidden;text-overflow:ellipsis;white-space: nowrap;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-多行文本超出显示…"><a href="#8-多行文本超出显示…" class="headerlink" title="8.多行文本超出显示…"></a>8.多行文本超出显示…</h3><pre class="line-numbers language-none"><code class="language-none">display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 3;overflow: hidden;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、步入正题js篇"><a href="#三、步入正题js篇" class="headerlink" title="三、步入正题js篇"></a>三、步入正题js篇</h2><h3 id="1-数组相关操作方法"><a href="#1-数组相关操作方法" class="headerlink" title="1.数组相关操作方法"></a>1.数组相关操作方法</h3><p>● push 在数组末尾添加元素<br>● pop 删除末尾元素<br>● unshift 在数组首位添加元素<br>● shift 删除首位元素<br>● splice 删除数组元素，或者在指定位置插入元素<br>● sort 数组排序<br>● revese 数组倒序（排序）</p><p>普通数组的查询：<br>● indexOf 从数组的第一位开始向后查找指定的值并返回值的位置<br>● lastIndexOf 从数组的最后一项向前查找指定的值并返回值的位置（下标）找不到返回-1<br>对象数组的查询：<br>● findIndex 从数组的第一位开始向后查找指定的值并返回值的位置<br>● filter 遍历数组，返回符合条件的新数组<br>● find 遍历数组，返回符合条件的对象<br>● every 遍历数组，如果有一项不符合条件就返回false (如果数组每项都符合条件，就返回true)<br>● some 遍历数组，如果有一项或多项符合条件就返回true<br>● splice 可做删除、插入、替换<br>● concat 追加元素到数组的末尾，返回一个新的数组（可合并两个数组）</p><h3 id="2-字符串相关操作方法"><a href="#2-字符串相关操作方法" class="headerlink" title="2.字符串相关操作方法"></a>2.字符串相关操作方法</h3><p>● includes() 字符串中是否包含某个字符串，返回true/false<br>● repeat(number) 得到一个重复number次的字符串<br>● startsWith() 字符串是否为某个字符串开始，我一般用它判断url是否有http<br>● endsWith() 字符串是否为某个字符串结尾，判断后缀名<br>● ‘abc’.padEnd(5, ‘0’); // abc00; 用给定的字符串在尾部拼接到指定长度。第一个参数为长度，第二个参数为用于拼接的值。<br>● ‘abc’.padStart(5, ‘1’); // 11abc; 用给定的字符串在首部拼接到指定长度。第一个参数为长度，第二个参数为用于拼接的值。首位补0？<br>● trim()、trimStart()、trimEnd()去空格</p><h3 id="3-合并空运算符"><a href="#3-合并空运算符" class="headerlink" title="3.??合并空运算符"></a>3.??合并空运算符</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test <span class="token operator">||</span> <span class="token string">'haha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// haha;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test <span class="token operator">??</span> <span class="token string">'hah'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '';</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://es6.ruanyifeng.com/#docs/string-methods">ES6官方文档</a></p><blockquote><p>害！今天就先写到这里吧！后期再慢慢更新</p></blockquote><p><img src="./images.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ES6 </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
            <tag> ES6 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端系统添加水印</title>
      <link href="/MyBlog/client-watermark/"/>
      <url>/MyBlog/client-watermark/</url>
      
        <content type="html"><![CDATA[<img src="./images.jpeg" width="90%"><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><blockquote><p>🎯 系统中重要数据的导出文件都有水印，而页面截图，是一个漏洞。<br>为了防止截图泄漏数据，前端添加水印，一旦，截图的数据泄漏，可以根据图片上的水印，追究到人。<br>本文使用的是前端方案：显性水印 + Canvas（前端方案可以减少服务器压力，快速响应页面）<br>注：对于安全度要求不是那么高的情况这种前端方案是可行的，但是对于安全度要求比较高建议采取其他方案比如后端处理（低透明度隐藏水印、傅里叶大法等）</p></blockquote><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><blockquote><p>1.定义watermark.js<br>2.设置画板的 pointerEvents 属性为none，页面事件穿透。<br>3.利用画板 canvas 的 toDataURL 方法设置水印，同时设置透明度，将画板的 z-index 设为 99999（置顶）<br>4.调用watermark中的方法，实现前端系统页面添加水印</p></blockquote><p>1.新建watermark.js<br>通过Canvas绘画，避免了在水印密度较大的情况下大量DOM元素的创建与添加<br>且用户无法通过浏览器开发者模式禁用元素来去除掉水印遮罩</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 初始化 watermark</span><span class="token keyword">let</span> watermark <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 封装设置系统水印方法</span><span class="token keyword">let</span> <span class="token function-variable function">setWatermark</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token string">'3.141592653589793.3.141592653589793'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> watermarkOld <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>watermarkOld<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>watermarkOld<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> can <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  can<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">320</span><span class="token punctuation">;</span>  can<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cans <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cans<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  cans<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cans<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">'15px Vedana'</span><span class="token punctuation">;</span>  cans<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'rgba(199, 199, 199, 0.256)'</span><span class="token punctuation">;</span>  cans<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">;</span>  cans<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">'Middle'</span><span class="token punctuation">;</span>  cans<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> can<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">,</span> can<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>pointerEvents <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'fixed'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token string">'99999'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'url('</span> <span class="token operator">+</span> can<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">') left top repeat'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 设置系统水印</span>watermark<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">setWatermark</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      id <span class="token operator">=</span> <span class="token function">setWatermark</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setWatermark</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 导出 watermark</span><span class="token keyword">export</span> <span class="token keyword">default</span> watermark<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在main.js中导入watermark.js并配置成全局属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> watermark <span class="token keyword">from</span> <span class="token string">'@/utils/watermark'</span><span class="token punctuation">;</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watermark <span class="token operator">=</span> watermark<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.在页面的js中调用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Header'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span> <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// 设置系统页面水印</span>      <span class="token function">setWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$watermark<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test_watermark_msg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> elementUI </tag>
            
            <tag> 水印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue使用eventBus总线，实现非父子组件间的通信</title>
      <link href="/MyBlog/vue-bus-newsletter/"/>
      <url>/MyBlog/vue-bus-newsletter/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><p>vue提供的数据间通讯方式有很多种，比较常用的有：<br>1.父子组件使用props传值或者provide/inject</p><blockquote><p>父组件中通过 this.$refs.子组件ref值.子组件方法；子组件中通过 this.$emit(‘父组件方法’) 来调用父组件方法。<br>父组件中通过provide来提供变量, 然后再子组件中通过inject来注入变量。<br>(只要调用了inject 就可以注入provide中的数据，不局限于只能从当前父组件的props属性中回去数据)</p></blockquote><p>2.非父子组建常用的通讯方式有 Vuex 、eventBus或者localStorage、sessionStorage</p><blockquote><p>vuex是vue.js数据状态管理，集中式存储管理应用的所有组件的状态，通过vuex来实现数据的全局共享。（适用于比较庞大的系统，小项目不建议使用）<br>eventBus事件总线，所有组件共用的一个事件中心。可以向该中心注册发送事件或接收事件， 所有组件都可以通知其他组件。（适用于较小的项目，项目过大难以维护）</p></blockquote><blockquote><p>通过window.localStorage.getItem(key)获取数据(JSON.parse() / JSON.stringify() 做数据格式转换)<br>通过window.localStorage.setItem(key,value)存储数据<br>localStorage / sessionStorage可以结合vuex，实现数据的持久保存，解决数据和状态混乱问题。</p></blockquote><h2 id="二、eventBus事件总线"><a href="#二、eventBus事件总线" class="headerlink" title="二、eventBus事件总线"></a>二、eventBus事件总线</h2><blockquote><p>eventBus实现vue跨级组件之间的通信，在项目中，如果数据和业务逻辑不是特别复杂，没有必要使用Vuex，用eventBus就能实现我们想要的功能而且代码比较简洁直观。<br>那么在vue项目中如何通过eventBus事件总线来实现非父子组件之间的数据通讯呢？<br>在简单的场景下，可以使用一个空的Vue实例作为中央事件总线</p></blockquote><blockquote><p>场景：这里模拟在右侧列表中操作数据后，局部刷新左侧菜单的统计<br>注：左侧菜单nav是一个单独的组件，右侧列表则是home中的一个视图（组件）[两个页面是非父子组件]</p></blockquote><p><img src="./table.jpg"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在项目的main.js中全局定义，将bus挂载到vue.prototype上</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在列表页test.vue（A）中触发事件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span> <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 初始化页面</span>      <span class="token operator">...</span> <span class="token operator">...</span>      <span class="token comment">// 更新左侧菜单</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'refreshMenu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在菜单组件nav.vue（B）中监听事件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Nav"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span> <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 监听事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'refreshMenu'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在组件销毁时卸载注册的总线事件，否则会多次挂载，造成触发一次但多个响应的情况</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'refreshMenu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 初始化菜单页面（获取菜单统计数据）</span>      <span class="token operator">...</span> <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 组件通讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Bus </tag>
            
            <tag> 组件通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element 自定义表单验证</title>
      <link href="/MyBlog/element-customize-form/"/>
      <url>/MyBlog/element-customize-form/</url>
      
        <content type="html"><![CDATA[<h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><blockquote><p>使用官网提供的表单验证，实现表单数据的自定义校验<br>除了非空校验，可能还有一些业务相关的数据校验，需要用到自定义表单验证<br>自定义正则校验、调用接口校验数据等等</p></blockquote><h2 id="二、处理方式"><a href="#二、处理方式" class="headerlink" title="二、处理方式"></a>二、处理方式</h2><blockquote><p>在form表单中绑定 rules 属性<br>在表单数据项中用 prop 绑定每个数据项校验规则</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span>  <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>  <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span>  <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span>  <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>      <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xzPerson<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-input<span class="token punctuation">"</span></span>      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名称<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>        <span class="token attr-name">clearable</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm.xzPerson<span class="token punctuation">"</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>填写名称<span class="token punctuation">"</span></span>      <span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xzType<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-input<span class="token punctuation">"</span></span>    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类型<span class="token punctuation">"</span></span>  <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm.xzType<span class="token punctuation">"</span></span>      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请选择类型<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in typeList<span class="token punctuation">"</span></span>        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span>        <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span>        <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span>      <span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--     表单设置了rules规则，表单中的每个数据项也可以单独设置数据校验规则：    当myForm.xzType为空或者为指定值时，xzXydm非必填[{required: false}]，否则就按表单定义的校验规则  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xzXydm<span class="token punctuation">"</span></span>    <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(myForm.xzType === <span class="token punctuation">'</span><span class="token punctuation">'</span> || myForm.xzType === <span class="token punctuation">'</span>xxx<span class="token punctuation">'</span>) ? [{required: false}] : rules.xzXydm<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-input form-label-max-length<span class="token punctuation">"</span></span>  <span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 如果标题过长，可以自定义换行 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>xxxxxx_1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>(xxxxx代码)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm.xzXydm<span class="token punctuation">"</span></span>      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span></span>      <span class="token attr-name">clearable</span>      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提示信息<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xzGszch<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-input form-label-max-length<span class="token punctuation">"</span></span>  <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>xxxxx_2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>(xxxxxx)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm.xzGszch<span class="token punctuation">"</span></span>      <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(myForm.xzType === <span class="token punctuation">'</span><span class="token punctuation">'</span> || myForm.xzType === <span class="token punctuation">'</span>xxx<span class="token punctuation">'</span>) ? true : false<span class="token punctuation">"</span></span>      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span></span>      <span class="token attr-name">clearable</span>      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提示信息<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在js中定义并初始化表单数据<br>定义好 myForm 以及 rules 相关数据<br>自定义验证参考官方文档使用 validator 实现，其中对应的验证方法必须写在 data 函数 return 的外面</p></blockquote><blockquote><p>错误信息通过 return callback(new Error(‘错误信息’)) 在页面上提示<br>数据正常 callback() 中不new Error<br>接口校验的方法，需要加上async修饰符，方法内部可直接通过 await 接口名称({ 参数: value }) 获取接口返回值进行判断（处理异步请求）</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入外部接口校验</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  checkXydm<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/api/publicity.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  getStrLength<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/utils/common"</span><span class="token punctuation">;</span><span class="token comment">// 引入外部正则校验</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  regSpecialSymbol<span class="token punctuation">,</span>  regNotNum<span class="token punctuation">,</span>  regSocialCreditCode<span class="token punctuation">,</span>  regGszcCode<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/utils/reg"</span><span class="token punctuation">;</span><span class="token comment">// 初始化页面数据</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 自定义验证 start</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">// 名称</span>    <span class="token keyword">let</span> <span class="token function-variable function">validateXzPerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入名称'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>regSpecialSymbol<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>regNotNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'名称不得包含数字、*或null或test或中英文问号等特殊字符'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getStrLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token function">getStrLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'名称长度不能超过50个字符且必须大于一个汉字或大于三个字符'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// xxxx代码</span>    <span class="token keyword">let</span> <span class="token function-variable function">validatorXzXydm</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入xxx代码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>regSocialCreditCode<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'xxxx代码填写错误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">checkXydm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> xydm<span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'xxxx代码验证有误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 注册号</span>    <span class="token keyword">let</span> <span class="token function-variable function">validatorXzGszch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>regGszcCode<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'注册代码填写错误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 自定义验证 end</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      myForm<span class="token operator">:</span> <span class="token punctuation">{</span>        xzPerson<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        xzType<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        xzXydm<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        xzGszch<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// 表单校验</span>      rules<span class="token operator">:</span> <span class="token punctuation">{</span>        xzPerson<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            validator<span class="token operator">:</span> validateXzPerson<span class="token punctuation">,</span>            trigger<span class="token operator">:</span> <span class="token string">'blur'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        xzType<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 普通的非空验证</span>          <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'请输入类型'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        xzXydm<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            validator<span class="token operator">:</span> validatorXzXydm<span class="token punctuation">,</span>            trigger<span class="token operator">:</span> <span class="token string">'blur'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        xzGszch<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>             validator<span class="token operator">:</span> validatorXzGszch<span class="token punctuation">,</span>            trigger<span class="token operator">:</span> <span class="token string">"blur"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>OK完美结束！</p></blockquote><img src="./imagepic.jpg" style="width: 400px">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUI </tag>
            
            <tag> form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之正则校验（一）</title>
      <link href="/MyBlog/client-reg/"/>
      <url>/MyBlog/client-reg/</url>
      
        <content type="html"><![CDATA[<h2 id="一、正则表达式"><a href="#一、正则表达式" class="headerlink" title="一、正则表达式"></a>一、正则表达式</h2><blockquote><p>🎯 归纳最近用到的一些正则表达式</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 正则表达式</span><span class="token comment">// 不包含特殊符号（长度0-50）</span><span class="token keyword">export</span> <span class="token keyword">const</span> regSpecialSymbol <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((?!\\|\/|:|\*|test|null|？|:|;|~|,|、|。|，|【】|{}|&amp;|$|¥|=|\?|&lt;|&gt;|\||'|%).){1,50}$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 不含数字</span><span class="token keyword">export</span> <span class="token keyword">const</span> regNotNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^0-9]$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 不包含*或null或test</span><span class="token keyword">export</span> <span class="token keyword">const</span> regNotStart <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^*|null|test]$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 护照（包含香港、澳门）</span><span class="token keyword">export</span> <span class="token keyword">const</span> regPassport <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^[EeKkGgDdSsPpHh]\d{8}$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\d{7}$)</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 港澳居民来往内地通行证</span><span class="token keyword">export</span> <span class="token keyword">const</span> regGaoPass <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[H|h|M|m](\d{8}|\d{10})$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 台湾居民来往大陆通行证</span><span class="token keyword">export</span> <span class="token keyword">const</span> regTwPass <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{8}|^[a-zA-Z0-9]{10}|^\d{18}$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 外国人永久居留身份证，如：USA110074110419、aUs110074110419</span><span class="token keyword">export</span> <span class="token keyword">const</span> regForeignerResideCard <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]{3}\d{12}$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 身份证</span><span class="token keyword">export</span> <span class="token keyword">const</span> regIdCard <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\d{8}(0\d|10|11|12)([0-2]\d|30|31)\d{3}$)|(^\d{6}(18|19|20)\d{2}(0\d|10|11|12)([0-2]\d|30|31)\d{3}(\d|X|x)$)</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 统一社会信用代码</span><span class="token keyword">export</span> <span class="token keyword">const</span> regSocialCreditCode <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([0-9A-HJ-NPQRTUWXY]{2}\d{6}[0-9A-HJ-NPQRTUWXY]{10}|[1-9]\d{14})$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 企业注册号</span><span class="token keyword">export</span> <span class="token keyword">const</span> regCompanyIdNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z0-9]\w{14}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token comment">// 工商注册号</span><span class="token keyword">export</span> <span class="token keyword">const</span> regGszcCode <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-7]\d{14}$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 组织机构代码</span><span class="token keyword">export</span> <span class="token keyword">const</span> regZzjgCode <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9A-HJ-NPQRTUWXY]{9}</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 税务登记号：为15位数字和大写英文字母</span><span class="token keyword">export</span> <span class="token keyword">const</span> regUnitNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Z0-9]{15}$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 事业单位证书号（长度不能超过12个字符，不能含有除数字或字母之外的字符）</span><span class="token keyword">export</span> <span class="token keyword">const</span> regSyzsCode <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z0-9]{12}$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 社会组织登记证号（长度不能超过50个字符，不能含有除数字或字母之外的字符）</span><span class="token keyword">export</span> <span class="token keyword">const</span> regShzzdjCode <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z0-9]{50}$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 金额 (大于0或者正数，六位小数)【/(^[1-9]{1}[0-9]*$)|(^[0-9]*\.[0-9]{2}$)/】</span><span class="token keyword">export</span> <span class="token keyword">const</span> regMoney <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([1-9]\d{0,9}|0)(\.\d{1,6})?$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 手机号验证</span><span class="token keyword">export</span> <span class="token keyword">const</span> regPhone <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(1[3|5|4|6|7|8|9]\d{1}[*|\d]{4}\d{4})$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 邮箱验证</span><span class="token keyword">export</span> <span class="token keyword">const</span> regEmail <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_]+[a-zA-Z0-9_\-\.]+[a-zA-Z0-9_]+@[\w-]+\.[\w-]+$|^[a-zA-Z0-9_]+[a-zA-Z0-9_\-\.]+[a-zA-Z0-9_]+@[\w-]+\.[\w-]+\.[\w-]+$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 英文字母首字母必须大写</span><span class="token keyword">export</span> <span class="token keyword">const</span> capitalize_first_letter <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(([A-Z0-9\u4e00-\u9fa5]+)([\w\u4e00-\u9fa5]+)?([\W]*))+$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 不能以空格、-、&amp;符号开头、结尾</span><span class="token keyword">export</span> <span class="token keyword">const</span> ignore_spaces <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([\u4e00-\u9fa5A-Za-z0-9\(\)]+)(.*[\u4e00-\u9fa5A-Za-z0-9\(\)]+)?$</span><span class="token regex-delimiter">/</span></span><span class="token keyword">export</span> <span class="token keyword">const</span> ignore_spaces_1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^\s\-\.\,;:'"!@\#\$%\^\&amp;\*\(\)\&lt;\&gt;\/\|\\].+$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、小插件"><a href="#二、小插件" class="headerlink" title="二、小插件"></a>二、小插件</h2><blockquote><p>推荐vs code中一个关于正则的小插件 any-rule 个人觉得还可以，虽然包含的正则数目不多，但是常规的一些都有。<br>在vs code应用商店中下载安装后，打开一个页面右键就会有：正则大全75条<br>当然，特殊的正则也是可以根据个人需要做一些调整的。</p></blockquote><p><img src="./reg1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面优化之防抖节流</title>
      <link href="/MyBlog/client-optimization-one/"/>
      <url>/MyBlog/client-optimization-one/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引题"><a href="#一、引题" class="headerlink" title="一、引题"></a>一、引题</h2><p> 🎯 最近同事在做项目过程中遇到一个问题：一个单页面的数据保存，在用户疯狂点击保存按钮时，数据库会保存多条数据。对于这个问题除了防抖其实有很多解决办法，网上也有不少已经处理好的架构，但是我认为这个还是可以收录在博客里的哈哈哈方便自己巩固一下基础知识，也锻炼锻炼自己写博客的能力。<img src="./watermark.webp"></p><h2 id="二、关于防抖节流"><a href="#二、关于防抖节流" class="headerlink" title="二、关于防抖节流"></a>二、关于防抖节流</h2><h3 id="1-什么是防抖"><a href="#1-什么是防抖" class="headerlink" title="1. 什么是防抖"></a>1. 什么是防抖</h3><blockquote><p>防抖与节流都是通过减少用户请求，优化前端性能、减少服务器压力</p></blockquote><blockquote><p>防抖：n秒执行1次，在n秒内被再次触发将会重新计时。（其他请求会被重置/清除）clearTimeout<br>简单理解为：事件响应函数在一段时间后才会执行</p></blockquote><blockquote><p>使用场景：<br>a. search搜索联想<br>b. input输入校验，onChange事件、onInput事件<br>c. 用户不断输入时，防抖节约请求资源。<br>d. window窗口不断改变大小时，防止重复渲染</p></blockquote><h3 id="2-什么是节流"><a href="#2-什么是节流" class="headerlink" title="2. 什么是节流"></a>2. 什么是节流</h3><blockquote><p>节流：间隔时间执行</p></blockquote><blockquote><p>使用场景：<br>a. 鼠标高频点击，防止重复提交<br>b. 滚动加载<br>c. 搜索相关也可以使用</p></blockquote><h2 id="三、实现方式"><a href="#三、实现方式" class="headerlink" title="三、实现方式"></a>三、实现方式</h2><blockquote><p>在系统的utils文件夹下面创建一个common.js 将一些公共的函数放入<br>js防抖（在指定的时间单位内只触发一次）与节流（在触发事件的一段时间内，不会再触发第二次）<br>这里我只是做了一个简易版，根据不同的业务可在此基础上进行拓展。</p></blockquote><h3 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1. 防抖"></a>1. 防抖</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 定义定时器</span><span class="token comment">/** * 防抖 * @param {*} fn 回调 * @param {*} delay 延迟时间 * @param {*} msg 提示信息 */</span> <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debance</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  delay <span class="token operator">=</span> delay <span class="token operator">?</span> delay <span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这里可以添加提示信息，告诉用户不要频繁操作</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'提示信息：您已经操作过啦！请勿频繁操作哦！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行函数，并且清空定时器</span>    timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-节流"><a href="#2-节流" class="headerlink" title="2. 节流"></a>2. 节流</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> throttleLast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 设置时间戳变量</span><span class="token comment">/** * 节流 * @param {*} fn 回调 * @param {*} delay 间隔时间 * @param {*} msg 提示信息 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  delay <span class="token operator">=</span> delay <span class="token operator">?</span> delay <span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前时间毫秒数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">&gt;</span> throttleLast <span class="token operator">+</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    throttleLast <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 这里可以添加提示信息，告诉用户不要频繁操作</span>      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'提示信息：您已经操作过啦！默认2秒钟内将会刷新，请勿频繁操作哦！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在页面中使用"><a href="#3-在页面中使用" class="headerlink" title="3. 在页面中使用"></a>3. 在页面中使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入函数（这里我就不详细描述了，具体的还是根据系统业务来）</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  debance<span class="token punctuation">,</span>  throttle<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/utils/common"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token operator">...</span> <span class="token operator">...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 请求接口获取列表数据</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 页面初始化获取列表数据</span>        <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 调用接口保存数据</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 保存操作按钮点击事件</span>        <span class="token function">handleSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">debance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>saveData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><blockquote><p>函数防抖和函数节流都是防止某一时间频繁触发，很多情况下，防抖与节流也都能够达到我们想要的效果，但是其具体的实现原理还是有区别的。<br>函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行<br>所以在使用时只需要区分不同场景便可灵活操作，当然两者也是可以结合使用的哦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element table组件上移下移数据实现自定义排序</title>
      <link href="/MyBlog/element-sort-table/"/>
      <url>/MyBlog/element-sort-table/</url>
      
        <content type="html"><![CDATA[<img src="./IMG_1987.JPG"><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><blockquote><p>在页面操作上移下移按钮，对表格行数据进行移动<br>实现表格自定义排序</p></blockquote><h2 id="二、处理方式"><a href="#二、处理方式" class="headerlink" title="二、处理方式"></a>二、处理方式</h2><blockquote><p>思路：<br>1.监听 table 数据行的选中事件（获取当前选中行的数据）假设当前行 currentData<br>2.上移、下移按钮点击事件：handleSortUp、handleSortDown<br>3.保存选中行的下标 currentIndex<br>4.保存选中行的上一行数据 currentData<br>5.移除选中行（下一行数据上移），并将上一行数据 currentData 插入到选中行的位置</p></blockquote><h3 id="1-实现table数据单行选中，并获得该行数据的index信息（用于后面上移下移数据）"><a href="#1-实现table数据单行选中，并获得该行数据的index信息（用于后面上移下移数据）" class="headerlink" title="1. 实现table数据单行选中，并获得该行数据的index信息（用于后面上移下移数据）"></a>1. 实现table数据单行选中，并获得该行数据的index信息（用于后面上移下移数据）</h3><blockquote><p>定义table并绑定数据<br>设置table的 current-change 事件（实现单行选中获取行信息）</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortTable<span class="token punctuation">"</span></span>  <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortTablData<span class="token punctuation">"</span></span>  <span class="token attr-name">:highlight-current-row</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>  <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSortTableCurrentChange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>序号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      {{ scope.$index + 1 }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>单位名称<span class="token punctuation">"</span></span>    <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>departmentName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在table的 current-change 回调中获取到当前选中行的index，并赋值给全局变量 currentIndex<br>在 handleSortUp 跟 handleSortDown 中实现上移下移</p></blockquote><blockquote><p>使用 splice 函数，上移实现方式：<br>a. 记录当前选中行的index，然后保存当前选中数据的上一行数据 upData<br>b. 然后再将 upData 移除[这样当前选中行就会自动上移到 upData 的位置]<br>c. 将事先保存好的 upData 插入到当前选中行的index [ 这样就完美实现了选中行上移，以此类推 ]</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 排列列表选中某行数据回调事件（获取当前选中行的下标）</span><span class="token function">handleSortTableCurrentChange</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> i <span class="token operator">===</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//排序上移</span><span class="token function">handleSortUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> upData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> upData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//排序下移</span><span class="token function">handleSortDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> downData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sortTablData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> downData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-界面预览"><a href="#2-界面预览" class="headerlink" title="2. 界面预览"></a>2. 界面预览</h3><p><img src="./code-img.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUI </tag>
            
            <tag> table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element自定义button图标</title>
      <link href="/MyBlog/element-myself-button-icon/"/>
      <url>/MyBlog/element-myself-button-icon/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><blockquote><p>🎯 ElementUI中icon图标有限，无法满足所有项目的需求。<br>API文档中的 Button 都是设置icon属性或者直接用<i class="xxx"></i>标签来定义按钮的图标，这是使用element提供的icon常规操作。<br>那么，如果需要引用其他图标该怎么处理呢？最近做的项目中就有用到，按钮需要自定义图标，我是采用了以下方式来处理的（不是最优，但可满足项目需求）</p></blockquote><h2 id="二、处理方式"><a href="#二、处理方式" class="headerlink" title="二、处理方式"></a>二、处理方式</h2><h3 id="1-官网API提供的图标按钮"><a href="#1-官网API提供的图标按钮" class="headerlink" title="1. 官网API提供的图标按钮"></a>1. 官网API提供的图标按钮</h3><p><img src="./img1.jpg" title="ElementUI图标按钮"></p><h3 id="2-自定义icon样式"><a href="#2-自定义icon样式" class="headerlink" title="2. 自定义icon样式"></a>2. 自定义icon样式</h3><blockquote><p>1、自定义一个搜索图标按钮<br>2、定义一个 el-icon-myself-search 类属性，将自定义（外部）的图片设置背景图<br>3、在 el-icon-myself-search:before 伪类中定义 content 文本占位（最好是一个汉字这样图标大小正好，我这里用Unicode转码了）<br>4、在伪类中设置 visibility 属性隐藏文字</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 查询按钮 */</span><span class="token selector">.el-icon-myself-search</span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./assets/assets/ic_按钮_搜查.png'</span><span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.el-icon-myself-search:before</span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\66ff"</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在页面中引用自定义的icon"><a href="#3-在页面中引用自定义的icon" class="headerlink" title="3. 在页面中引用自定义的icon"></a>3. 在页面中引用自定义的icon</h3><pre class="line-numbers language-none"><code class="language-none">&lt;el-button type="primary"    icon="el-icon-myself-search"    @click="handelSearch"&gt;查询&lt;/el-button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-效果预览"><a href="#4-效果预览" class="headerlink" title="4. 效果预览"></a>4. 效果预览</h3><p><img src="./img2.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd在IE浏览器中组件不渲染</title>
      <link href="/MyBlog/client-antd/"/>
      <url>/MyBlog/client-antd/</url>
      
        <content type="html"><![CDATA[<h2 id="一、兼容性"><a href="#一、兼容性" class="headerlink" title="一、兼容性"></a>一、兼容性</h2><blockquote><p>🎯 Ant Design Vue 支持所有的现代浏览器和 IE9+<br>对于 IE 系列浏览器，需要提供 es5-shim 和 es6-shim 等 Polyfills 的支持<br>如果你使用了 babel，强烈推荐使用 babel-polyfill 和 babel-plugin-transform-runtime 来替代以上两个shim<br>【摘自Ant Design Vue官网】</p></blockquote><h2 id="二、处理方式"><a href="#二、处理方式" class="headerlink" title="二、处理方式"></a>二、处理方式</h2><p>按照官方文档的要求，在项目中引入babel-polyfill 和 babel-plugin-transform-runtime</p><ol><li><p>先在项目中安装依赖包</p><pre class="line-numbers language-none"><code class="language-none">npm i @babel/polyfill @babel/runtime --savenpm i  @babel/plugin-transform-runtime @babel/preset-envnpm install --save @babel/polyfill<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在main.js中引用</p><pre class="line-numbers language-none"><code class="language-none">// 兼容IE浏览器import 'core-js/stable'import 'regenerator-runtime/runtime'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p><a href="https://www.antdv.com/docs/vue/getting-started-cn/">Ant Design Vue官方文档地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>👨‍💻mac安装win10虚拟机</title>
      <link href="/MyBlog/virtual-machine/"/>
      <url>/MyBlog/virtual-machine/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备下载相关工具"><a href="#一、准备下载相关工具" class="headerlink" title="一、准备下载相关工具"></a>一、准备下载相关工具</h2><blockquote><p>🎯 需要安装的工具：虚拟机控制中心 + win10镜像<br>1、win10镜像<br>2、Parallels Desktop<br>⚠️一定要先下载镜像然后再下载并安装控制中心！！！</p></blockquote><h2 id="二、下载win10镜像-控制中心"><a href="#二、下载win10镜像-控制中心" class="headerlink" title="二、下载win10镜像+控制中心"></a>二、下载win10镜像+控制中心</h2><pre class="line-numbers language-none"><code class="language-none">用迅雷下载win10镜像ed2k://|file|cn_windows_10_business_editions_version_1909_x64_dvd_0ca83907.iso|5275090944|9BCD5FA6C8009E4D0260E4B23008BD47|/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>下载虚拟机控制中心，这里分享的是icloud中的地址，也可以去官网上去下载安装<br><a href="https://www.icloud.com.cn/iclouddrive/012o3HDPl3lcQA-Ym_oLoJS9Q#Parallels_Desktop_16.5.0-49183_-_Toolbox_4.5">https://www.icloud.com.cn/iclouddrive/012o3HDPl3lcQA-Ym_oLoJS9Q#Parallels_Desktop_16.5.0-49183_-_Toolbox_4.5</a></p></blockquote><h2 id="三、安装控制中心"><a href="#三、安装控制中心" class="headerlink" title="三、安装控制中心"></a>三、安装控制中心</h2><h3 id="1、双击下图“安装-app”"><a href="#1、双击下图“安装-app”" class="headerlink" title="1、双击下图“安装.app”"></a>1、双击下图“安装.app”</h3><p><img src="./image.png"></p><h3 id="2、点击删除"><a href="#2、点击删除" class="headerlink" title="2、点击删除"></a>2、点击删除</h3><p><img src="./image(1).png"></p><h3 id="3、选“安装-Windows或其他操作系统（从DVD或镜像文件）”，点击继续"><a href="#3、选“安装-Windows或其他操作系统（从DVD或镜像文件）”，点击继续" class="headerlink" title="3、选“安装 Windows或其他操作系统（从DVD或镜像文件）”，点击继续"></a>3、选“安装 Windows或其他操作系统（从DVD或镜像文件）”，点击继续</h3><p><img src="./image(2).png"></p><h3 id="4、之后会扫描当前系统中的镜像文件，点击继续"><a href="#4、之后会扫描当前系统中的镜像文件，点击继续" class="headerlink" title="4、之后会扫描当前系统中的镜像文件，点击继续"></a>4、之后会扫描当前系统中的镜像文件，点击继续</h3><p><img src="./image(3).png"></p><h3 id="5、选择windows-版本，我选的是专业版（默认是企业版）"><a href="#5、选择windows-版本，我选的是专业版（默认是企业版）" class="headerlink" title="5、选择windows 版本，我选的是专业版（默认是企业版）"></a>5、选择windows 版本，我选的是专业版（默认是企业版）</h3><p><img src="./image(4).png"></p><h3 id="6、取消勾选后，点击继续"><a href="#6、取消勾选后，点击继续" class="headerlink" title="6、取消勾选后，点击继续"></a>6、取消勾选后，点击继续</h3><p><img src="./image(5).png"></p><h3 id="7、到这里就已经安装成功了，但是我在进行下一步操作的时候又遇到了其他的问题，如图"><a href="#7、到这里就已经安装成功了，但是我在进行下一步操作的时候又遇到了其他的问题，如图" class="headerlink" title="7、到这里就已经安装成功了，但是我在进行下一步操作的时候又遇到了其他的问题，如图"></a>7、到这里就已经安装成功了，但是我在进行下一步操作的时候又遇到了其他的问题，如图</h3><p><img src="./image(6).png"></p><h2 id="三、配置虚拟机网络"><a href="#三、配置虚拟机网络" class="headerlink" title="三、配置虚拟机网络"></a>三、配置虚拟机网络</h2><h3 id="1、启动虚拟机出现网络问题"><a href="#1、启动虚拟机出现网络问题" class="headerlink" title="1、启动虚拟机出现网络问题"></a>1、启动虚拟机出现网络问题</h3><p><img src="./image(7).png"></p><p>启动虚拟机之后，由于未联网会导致初始化失败，因此需要设置虚拟机的网络与宿主机共享。</p><blockquote><p>(1)、右键访达-&gt;前往文件夹</p></blockquote><p><img src="./image(8).png"></p><blockquote><p>(2)、打开目录：「/Library/Preferences/Parallels/」 中的 「network.desktop.xml 文件。找到<usekextless>-1</usekextless> 选项，将其改为<usekextless>0</usekextless>，然后保存并替换！如果文件中没有这个选项，可以直接将此选项复制粘贴到 「network.desktop.xml」 文件中。</p></blockquote><p><img src="./image(9).png"><br><img src="./image(10).png"></p><p>(3)、操作完成后重启虚拟机生效</p><p>具体参考<a href="https://www.foxmac.com/pd-16-network-failure.html">解决 PD虚拟机 网络初始化失败的方案</a></p><h2 id="四、配置虚拟机网络"><a href="#四、配置虚拟机网络" class="headerlink" title="四、配置虚拟机网络"></a>四、配置虚拟机网络</h2><h3 id="1、设置虚拟机与宿主机（Mac）共享网络"><a href="#1、设置虚拟机与宿主机（Mac）共享网络" class="headerlink" title="1、设置虚拟机与宿主机（Mac）共享网络"></a>1、设置虚拟机与宿主机（Mac）共享网络</h3><p>在虚拟机的控制中心-&gt;设置-&gt;硬件-&gt;网络<br><img src="./image(11).png"></p><h3 id="2、设置虚拟机打开模式"><a href="#2、设置虚拟机打开模式" class="headerlink" title="2、设置虚拟机打开模式"></a>2、设置虚拟机打开模式</h3><p>在虚拟机中-&gt;查看，设置打开模式：融合/全屏<br><img src="./image(12).png"></p><p>OK啦到这里虚拟机已经安装好了，相关配置在控制中心配置就好啦，更新配置之后重启生效哦！<br>到这你就能在Mac上享用双操作系统啦！具体的网络代理设置可能会比较麻烦，后续遇到了再处理，补充。<br><img src="./image(13).png"></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql日期函数的使用与批量更新</title>
      <link href="/MyBlog/first-mysql/"/>
      <url>/MyBlog/first-mysql/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前MySQL版本已经更新到8.0.15，但是大部分企业中使用的还是MySQL5.7的。我本地安装的是MySQL5.7.20，因为MySQL版本的不同可能对某些SQL语句的支持度也不同，所以特地在此说明。</p></blockquote><h3 id="最近使用到MySQL中这两个日期函数："><a href="#最近使用到MySQL中这两个日期函数：" class="headerlink" title="最近使用到MySQL中这两个日期函数："></a>最近使用到MySQL中这两个日期函数：</h3><p>1、date_sub(date，interval num 单位); 返回date减去num 时间间隔后的时间</p><pre class="line-numbers language-none"><code class="language-none">例如：select date_sub(date, interval 1 year);select date_sub(date, interval 1 quarter);select date_sub(date, interval 1 month);select date_sub(date, interval 1 week);select date_sub(date, interval 1 day);  等同于 date_add(date, interval -1 day);select date_sub(date, interval 1 hour);select date_sub(date, interval 1 minute);select date_sub(date, interval 1 second);select date_sub(date, interval 1 microsecond);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：date_sub(date，interval num 单位) 里面的 num 是数字类型的参数，单位则是 年(year)、半年(quarter)、月(month)、日(day)、周(week)、小时(hour)、分钟(minute)、秒(second)、毫秒(microsecond)。【与之对应的还有 date_add() 函数用法与 date_sub() 一样】</p></blockquote><p>2、datediff(date1,date2); 返回date1减去date2的差值</p><pre class="line-numbers language-none"><code class="language-none">例如：select datediff('2019-05-17', '2019-05-11'); -- 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果使用这两个函数来查询最近一周、一个月、半年、一年…的数据会有什么不同的效果呢？</p><p>1、使用函数 date_sub()：</p><pre class="line-numbers language-none"><code class="language-none">select date_sub(date, interval 1 day); -- 当天select date_sub(date, interval 7 day); -- 最近一周select date_sub(date, interval 30 day); -- 最近一个月select date_sub(date, interval 365 day); -- 最近一年......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、使用函数 datediff():</p><pre class="line-numbers language-none"><code class="language-none">第一个参数作为动态参数输入，第二个为数据库中的时间字段select datediff('2019-05-17', '2019-05-11') &lt;= 7 ; -- 最近一周显然是没有问题的，但是当第二个参数的天数大于第一个参数的天数时则会出现问题。例如：select datediff('2019-05-01', '2019-04-11') &lt;= 7 ;     select datediff('2019-05-01', '2019-05-11') &lt;= 7 ;这两条语句会使得时间范围判断无效!!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：函数 date_sub() 与 date_add() 都可以做时间范围的判断，而 datediff() 更适用做时间差。这几个函数各司其职，大大简化了数据库的时间操作。</p></blockquote><h3 id="关于MySQL语句的批量更新操作"><a href="#关于MySQL语句的批量更新操作" class="headerlink" title="关于MySQL语句的批量更新操作"></a>关于MySQL语句的批量更新操作</h3><p>一般需要用到批量添加或者更新的，我们都会想到用循环迭代。sql中使用when … then …</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!-- 批量修改 --&gt;&lt;update id="updateBatch" parameterType="java.util.List"&gt;     update hnca_licetype set     PARAM_TOP =     &lt;foreach collection="list" item="licetypes" index="index"                    separator=" " open="case LICETYPEID" close="end"&gt;          when #{licetypes.lICETYPEID} then #{licetypes.pARAMTOP}     &lt;/foreach&gt;     ,PARAM_LEFT =     &lt;foreach collection="list" item="licetypes" index="index"                    separator=" " open="case LICETYPEID" close="end"&gt;          when #{licetypes.lICETYPEID} then #{licetypes.pARAMLEFT}     &lt;/foreach&gt;     where LICETYPEID in     &lt;foreach collection="list" item="licetypeIds" index="index"                    separator="," open="(" close=")"&gt;          #{licetypeIds.lICETYPEID}     &lt;/foreach&gt;&lt;/update&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 <a href="https://www.cnblogs.com/ggjucheng/p/3352280.html">https://www.cnblogs.com/ggjucheng/p/3352280.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL页面上时间展示与数据库中时间相差8个小时</title>
      <link href="/MyBlog/mysql-time/"/>
      <url>/MyBlog/mysql-time/</url>
      
        <content type="html"><![CDATA[<p>尝试一下几种方法：</p><p>方法一：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd  HH:mm:ss"</span> <span class="token punctuation">,</span>  timezone<span class="token operator">=</span><span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span class="token keyword">private</span>  <span class="token class-name">Date</span>  createTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">url: jdbc:mysql://127.0.0.1:3306/guns?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=CONVERT_TO_NULL&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改:<br>把serverTimezone=UTC改为serverTimezone=Asia/Shanghai<br>UTC为世界统一时间，可以选择东8区的Hongkong、Asia/Shanghai或者Asia/Hongkong作为参数</p><p>原网址 <a href="https://blog.csdn.net/beauxie/article/details/78552919">SpringBoot返回date日期格式化，解决返回为TIMESTAMP时间戳格式或8小时时间差</a><br>在其他方案没有解决的情况下，包括<a href="https://blog.csdn.net/luan666/article/details/80399349">spring boot项目使用@JsonFormat无效问题</a></p><p>方法三：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>format <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>  <span class="token comment">//FastJson包使用注解</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span> <span class="token comment">//Jackson包使用注解</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>   <span class="token comment">//格式化前台日期参数注解</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案：在application.properties配置文件增加以下配置:</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring.jackson.date-format=yyyy-MM-dd HH:mm:ssspring.jackson.time-zone=GMT+8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一行指定date输出格式为yyyy-MM-dd HH:mm:ss；<br>第二行指定时区，解决8小时的时间差问题。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> Date </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 jQuery.fileDownload.js 插件实现Ajax下载文件</title>
      <link href="/MyBlog/hello-world/"/>
      <url>/MyBlog/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近期做项目过程中有一个需求，根据文档的地址从服务器上下载该文档。分两种情况，第一种是单个文件的下载（使用文件流输出到前台页面），第二种是多个文件实现批量下载。</p></blockquote><blockquote><p>思路一：单个文件下载，获取文件流响应到前台页面。<br>多个文件批量下载，获取文件路径集合，循环下载。（效率低，显然是不可取的）<br>思路二：单个文件下载，写一个工具类获取文件流响应到页面同时封装文件打包zip方法。<br>多个文件批量下载，将获取到的文件路径打包成zip，再使用文件流响应到前台页面。</p></blockquote><blockquote><p>原理：（从磁盘读到内存然后从内存写入网络，客服端接收流保存）<br>1、获取文件路径，使用文件输入流将文件输入到内存<br>2、使用输出流将文件输出到页面<br>3、页面接收到响应流在回调中给出提示</p></blockquote><p>问题：<br>1、返回文件名中文乱码</p><p>解决：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、因为原生的ajax请求是无法进行文件上传下载的（无法处理流格式的参数），所以我想到了用form表单模拟提交。但是，使用form表单提交在请求结束之后前台无法获得回调函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> rootPath <span class="token operator">+</span> <span class="token string">"hncaBusinessinfo/downLoadPdf"</span><span class="token punctuation">;</span><span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&amp;lt;input&amp;gt;&amp;lt;/input&amp;gt;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"hidden"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"PATHSIGNFORM"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决：<br>使用jQuery.filedownload.js来实现文件下载的回调（页面需要先引用 jQuery.fileDownload.js）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> rootPath <span class="token operator">+</span> <span class="token string">"hncaBusinessinfo/downLoadPdf"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">fileDownload</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>    httpMethod <span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    data <span class="token operator">:</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">prepareCallback</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        index <span class="token operator">=</span> layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">'文件正在下载中，请稍后...'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>icon<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>shade<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'#f5f5f5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>scrollbar<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>offset<span class="token operator">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span> time<span class="token operator">:</span><span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">successCallback</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        layer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">failCallback</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">myAlert</span><span class="token punctuation">(</span><span class="token string">"下载失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在使用了jQuery.filedownload.js来下载文件，但是页面下载成功后回调没有反应。</p><p>解决：刚开始找了很久，一直以为是前台代码写错了后面才发现使用jQuery.filedownload.js下载文件页面要获取回调函数后台必须要设置头部信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 没有设置这个头部信息，页面还是没办法执行回调函数的呢！</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"fileDownload=true; path=/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="话不多说，直接来工具类的代码："><a href="#话不多说，直接来工具类的代码：" class="headerlink" title="话不多说，直接来工具类的代码："></a>话不多说，直接来工具类的代码：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 单个PDF文件下载（单个文件下载）    * @param response 响应流    * @param fileName 文件名（单个文件下载无需设置此属性值）    * @param urlStr PDF路径    * @return    */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">downLoadPdfByUrl</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span><span class="token class-name">String</span> urlStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 获取一个文件</span>    <span class="token class-name">File</span> downFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 配置文件下载</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实现文件下载</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 控制一次输出的流量</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 文件输入流 【输入到服务器内存】</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 文件输入缓冲流</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">//页面下载成功回调函数需设置头信息</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"fileDownload=true; path=/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 下载文件能正常显示中文</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>downFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将本地的文件 输出 到 内存中</span>        fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>downFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加缓冲 【提高读写性能】</span>        bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取网络 输出流 （从 response 中获取）</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 读取规定流量 的 文件流</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果还有文件流 （使用while 循环读取 文件流）</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出到网络中</span>            i <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再读一段文件流</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Download the song successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//            e.printStackTrace();</span>        <span class="token keyword">return</span> <span class="token string">"系统找不到指定的文件，PDF文件下载失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 为了提高服务器性能，读写流用完后一定要关闭</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"PDF文件下载成功！"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多文件下载（批量下载），下载的是zip格式"><a href="#多文件下载（批量下载），下载的是zip格式" class="headerlink" title="多文件下载（批量下载），下载的是zip格式"></a>多文件下载（批量下载），下载的是zip格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 批量下载打包zip压缩包    * @param response    * @param names    * @param paths    */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">downloadZip</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//存放--服务器上zip文件的目录</span>    <span class="token class-name">String</span> directory <span class="token operator">=</span> <span class="token string">"D:\\repositoryPdf\\"</span><span class="token operator">+</span><span class="token string">"pdf"</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> directoryFile<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>directoryFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>directoryFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        directoryFile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//设置最终输出zip文件的目录+文件名</span>    <span class="token class-name">SimpleDateFormat</span> formatter  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> zipFileName <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".zip"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> strZipPath <span class="token operator">=</span> directory<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>zipFileName<span class="token punctuation">;</span>    <span class="token class-name">ZipOutputStream</span> zipStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> zipSource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedInputStream</span> bufferStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>strZipPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment">//构造最终压缩包的输出流</span>        zipStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>paths<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//解码获取真实路径与文件名</span>            <span class="token class-name">String</span> realFileName <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> realFilePath <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//考虑文件不存在时如何处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                zipSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将需要压缩的文件格式化为输入流</span>                <span class="token comment">/**                    * 压缩条目不是具体独立的文件，而是压缩包文件列表中的列表项，称为条目，就像索引一样这里的name就是文件名,                    * 文件名和之前的重复就会导致文件被覆盖                    */</span>                <span class="token class-name">ZipEntry</span> zipEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>realFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在压缩目录中文件的名字</span>                zipStream<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>zipEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位该压缩条目位置，开始写入文件到压缩包中</span>                bufferStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>zipSource<span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> bufferStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    zipStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">//关闭流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> bufferStream<span class="token punctuation">)</span> bufferStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> zipStream<span class="token punctuation">)</span><span class="token punctuation">{</span>                zipStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                zipStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> zipSource<span class="token punctuation">)</span> zipSource<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                e.printStackTrace();</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PDF文件下载失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断系统压缩文件是否存在：true-把该压缩文件通过流输出给客户端后删除该压缩文件  false-未处理</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">downLoadPdfByUrl</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>zipFileName<span class="token punctuation">,</span>strZipPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        zipFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="controller类"><a href="#controller类" class="headerlink" title="controller类"></a>controller类</h4><h5 id="判断该文件路径是否有效"><a href="#判断该文件路径是否有效" class="headerlink" title="判断该文件路径是否有效"></a>判断该文件路径是否有效</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hncaBusinessinfo/fileExists"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Pass</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"判断文件是否存在"</span><span class="token punctuation">,</span> notes<span class="token operator">=</span><span class="token string">"返回文件是否存在消息"</span> <span class="token punctuation">,</span>httpMethod<span class="token operator">=</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DataRes</span> <span class="token function">fileExists</span><span class="token punctuation">(</span><span class="token class-name">HncaBusinessinfo</span> hncaBusinessinfo<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> hncaBusinessinfo<span class="token punctuation">.</span><span class="token function">getPATHSIGNFORM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//记录未找到路径的文件个数</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>paths<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token class-name">DataRes</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"找不到该文件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token operator">:</span>paths<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>count<span class="token operator">!=</span>paths<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">DataRes</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">,</span><span class="token string">"其中包含"</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"个无效路径文件，是否继续下载？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>paths<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">DataRes</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"所选的"</span><span class="token operator">+</span>paths<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token string">"个文件路径皆为无效路径！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">DataRes</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"确认下载您选中的"</span><span class="token operator">+</span>paths<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token string">"个文件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 批量下载PDF文档-&gt;hnca_businessinfo*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hncaBusinessinfo/downLoadPdf"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Pass</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"下载PDF文档"</span><span class="token punctuation">,</span> notes<span class="token operator">=</span><span class="token string">"批量下载签字表"</span> <span class="token punctuation">,</span>httpMethod<span class="token operator">=</span><span class="token string">"POST"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">downLoadPdf</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=undefined"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        paths <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断是批量下载还是单个下载</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>paths<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//直接调用单个PDF文档下载</span>        <span class="token class-name">DownloadPdf</span><span class="token punctuation">.</span><span class="token function">downLoadPdfByUrl</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>paths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment">//根据PDF下载地址获取单个PDF文档名称（path的最后一个/到.pdf） lastIndexOf("f")</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>paths<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>paths<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".pdf"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将PDF文档打包为zip文件提供给用户下载</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>paths<span class="token punctuation">.</span>length<span class="token operator">==</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token class-name">DownloadPdf</span><span class="token punctuation">.</span><span class="token function">downloadZip</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>names<span class="token punctuation">,</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"PDF文件下载成功！"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/zf18234031156/article/details/83744097">springboot-单文件下载、多文件下载（zip）</a></p><p><a href="https://blog.csdn.net/weixin_41029960/article/details/82585082">使用 jQuery.fileDownload.js 插件实现Ajax下载文件</a></p>]]></content>
      
      
      <categories>
          
          <category> 文件下载 </category>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 实现定时器的几种方式</title>
      <link href="/MyBlog/spring-time/"/>
      <url>/MyBlog/spring-time/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在项目开发中使用到spring定时器，综合自己的开发以及在网上查找的资料总结一下。</p></blockquote><blockquote><p>1、Quartz 是我最先了解到的一个功能比较强大的spring定时器。可以实现按照指定时间执行，也可以按照指定的频率执行定时任务。只是在配置方面似乎比较复杂。<br>Quartz 任务调度的核心元素有：Scheduler（任务调度器）、Trigger（触发器）、Job（任务）。其中Scheduler是实际任务调度的控制器，Trigger是定义任务调度时间的元素，Job是调度的任务。</p></blockquote><p>demo实现：</p><p>（1）、Pom.xml引入依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--集成quartz--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.quartz-scheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${quartz.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- quartz默认使用csp0连接池，如果项目使用的不是则需要排除依赖包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）、创建配置文件类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * 定时任务配置 * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SchedulerFactoryBean</span> <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"druidDataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//quartz参数</span>        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//配置实例</span>        <span class="token comment">//prop.put("org.quartz.scheduler.instanceName", "MyScheduler");//实例名称</span>        prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"org.quartz.scheduler.instanceId"</span><span class="token punctuation">,</span> <span class="token string">"AUTO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线程池配置</span>        prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"org.quartz.threadPool.threadCount"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//JobStore配置</span>        prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"org.quartz.jobStore.class"</span><span class="token punctuation">,</span> <span class="token string">"org.quartz.impl.jdbcjobstore.JobStoreTX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"org.quartz.jobStore.tablePrefix"</span><span class="token punctuation">,</span> <span class="token string">"QRTZ_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SchedulerFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setQuartzProperties</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setSchedulerName</span><span class="token punctuation">(</span><span class="token string">"MyScheduler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据库中存储的名字</span>        <span class="token comment">//QuartzScheduler 延时启动，应用启动5秒后 QuartzScheduler 再启动</span>        factory<span class="token punctuation">.</span><span class="token function">setStartupDelay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//factory.setApplicationContextSchedulerContextKey("applicationContextKey");</span>        <span class="token comment">//可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了</span>        factory<span class="token punctuation">.</span><span class="token function">setOverwriteExistingJobs</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置自动启动，默认为true</span>        factory<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）、创建自定义Job任务类，继承QuartzJobBean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>rongzaiboot<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">ScheduleJob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>rongzaiboot<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">ScheduleJobLog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>rongzaiboot<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ScheduleJobLogService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>rongzaiboot<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">SpringContextUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">QuartzJobBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行quartz任务。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMergedJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"JOB_PARAM_KEY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将获取的对象序列化的json 转化为实体类对象</span>        <span class="token class-name">ScheduleJob</span> scheduleJob <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">ScheduleJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> jobId <span class="token operator">=</span> scheduleJob<span class="token punctuation">.</span><span class="token function">getJobId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> beanName <span class="token operator">=</span> scheduleJob<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> scheduleJob<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> params <span class="token operator">=</span> scheduleJob<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//quartz没有被spring管理 所以通过其它方式获取service</span>        <span class="token class-name">ScheduleJobLogService</span> scheduleJobLogService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ScheduleJobLogService</span><span class="token punctuation">)</span> <span class="token class-name">SpringContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"scheduleJobLogServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存任务记录日志</span>        <span class="token class-name">ScheduleJobLog</span> scheduleJobLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduleJobLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduleJobLog<span class="token punctuation">.</span><span class="token function">setJobId</span><span class="token punctuation">(</span>jobId<span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduleJobLog<span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduleJobLog<span class="token punctuation">.</span><span class="token function">setMethodName</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduleJobLog<span class="token punctuation">.</span><span class="token function">setParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduleJobLog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> targetClass <span class="token operator">=</span> <span class="token class-name">SpringContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">//通过反射获取方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                method <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                method <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使方法具有public权限</span>            <span class="token comment">//根据反射执行方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>            scheduleJobLog<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存日志里的操作状态 0:成功</span>            scheduleJobLog<span class="token punctuation">.</span><span class="token function">setTimes</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//耗时多长时间</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"任务执行成功，任务ID："</span> <span class="token operator">+</span> jobId <span class="token operator">+</span> <span class="token string">"，总耗时："</span> <span class="token operator">+</span> endTime <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>            scheduleJobLog<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误消息</span>            scheduleJobLog<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//失败</span>            scheduleJobLog<span class="token punctuation">.</span><span class="token function">setTimes</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//耗时</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"任务执行失败，任务ID："</span><span class="token operator">+</span>jobId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//最后调用service保存定时任务日志记录</span>            scheduleJobLogService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>scheduleJobLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）、创建Scheduler工具类,quartz的操作核心，包括操作quartz在数据库中的表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>rongzaiboot<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">ScheduleJob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>rongzaiboot<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">QuartzJob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建任务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createJob</span><span class="token punctuation">(</span><span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">,</span> <span class="token class-name">ScheduleJob</span> scheduleJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> jobId <span class="token operator">=</span> scheduleJob<span class="token punctuation">.</span><span class="token function">getJobId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建Job对象</span>            <span class="token class-name">JobDetail</span> job <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">QuartzJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"JOB_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取cron表达式 并创建对象</span>            <span class="token class-name">CronScheduleBuilder</span> cronScheduleBuilder <span class="token operator">=</span> <span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>scheduleJob<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withMisfireHandlingInstructionDoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建触发器</span>            <span class="token class-name">CronTrigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"TRIGGET_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>cronScheduleBuilder<span class="token punctuation">)</span> <span class="token comment">//将cron表达式配置到触发器</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将对象josn序列化存储到Job的getJobDataMap()方法中，为后续根据获取属性执行对应的类的任务</span>            job<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"JOB_PARAM_KEY"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>scheduleJob<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//存数据</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">pauseJob</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"JOB_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使任务处于等待状态,创建后不会执行</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RRException</span><span class="token punctuation">(</span><span class="token string">"创建任务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 更新任务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateJob</span><span class="token punctuation">(</span><span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">,</span> <span class="token class-name">ScheduleJob</span> scheduleJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取新的cron表达式</span>        <span class="token class-name">CronScheduleBuilder</span> cronScheduleBuilder <span class="token operator">=</span> <span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>scheduleJob<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withMisfireHandlingInstructionDoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> jobId <span class="token operator">=</span> scheduleJob<span class="token punctuation">.</span><span class="token function">getJobId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//拿到原有的trigger</span>            <span class="token class-name">TriggerKey</span> triggerKey <span class="token operator">=</span> <span class="token class-name">TriggerKey</span><span class="token punctuation">.</span><span class="token function">triggerKey</span><span class="token punctuation">(</span><span class="token string">"TRIGGER_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CronTrigger</span> trigger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CronTrigger</span><span class="token punctuation">)</span> scheduler<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//为原有的trigger赋予新的cron表达式</span>            trigger <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getTriggerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>cronScheduleBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//执行原有的trigger更新</span>            scheduler<span class="token punctuation">.</span><span class="token function">rescheduleJob</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RRException</span><span class="token punctuation">(</span><span class="token string">"更新定时任务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 删除任务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteJob</span><span class="token punctuation">(</span><span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">,</span> <span class="token class-name">Long</span> jobId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            scheduler<span class="token punctuation">.</span><span class="token function">deleteJob</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"JOB_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RRException</span><span class="token punctuation">(</span><span class="token string">"删除定时任务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 恢复任务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resumeJob</span><span class="token punctuation">(</span><span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">,</span> <span class="token class-name">Long</span> jobId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            scheduler<span class="token punctuation">.</span><span class="token function">resumeJob</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"JOB_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RRException</span><span class="token punctuation">(</span><span class="token string">"恢复定时任务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 立即执行定时任务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">,</span> <span class="token class-name">Long</span> jobId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//只执行一次并且不会改变任务的状态</span>            scheduler<span class="token punctuation">.</span><span class="token function">triggerJob</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"JOB_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RRException</span><span class="token punctuation">(</span><span class="token string">"立即执行定时任务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 暂停任务     *     * @param scheduler     * @param jobId     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pauseJob</span><span class="token punctuation">(</span><span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">,</span> <span class="token class-name">Long</span> jobId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            scheduler<span class="token punctuation">.</span><span class="token function">pauseJob</span><span class="token punctuation">(</span><span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"JOB_"</span> <span class="token operator">+</span> jobId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RRException</span><span class="token punctuation">(</span><span class="token string">"暂停定时任务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）、保存任务的自定义类实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleJob</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> jobId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> beanName<span class="token punctuation">;</span> <span class="token comment">//执行的类名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> methodName<span class="token punctuation">;</span> <span class="token comment">//方法名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> params<span class="token punctuation">;</span> <span class="token comment">//参数</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">;</span> <span class="token comment">//cron表达式</span>    <span class="token keyword">private</span> <span class="token class-name">Byte</span> status<span class="token punctuation">;</span> <span class="token comment">//任务状态 0，运行 1，暂停</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> remark<span class="token punctuation">;</span> <span class="token comment">//备注</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span> <span class="token comment">//创建时间</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2、Timer 是java自带的java.util.Timer类，允许调度一个java.util.TimerTask任务，可以让程序按照某个频率执行任务，但不能指定时间运行，所以一般使用的较少。</p></blockquote><p>demo 实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTimer</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">TimerTask</span> timerTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task  run:"</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//安排指定的任务在指定的时间开始进行重复的固定延迟执行。这里是每3秒执行一次</span>       timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>timerTask<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3、ScheduledExecutorService jdk自带的一个类；是基于线程池设计的定时任务类,每个调度任务都会分配到线程池中的一个线程去执行,也就是说,任务是并发执行,互不影响。</p></blockquote><p>demo 实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScheduledExecutorService</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">ScheduledExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 参数：1、任务体 2、首次执行的延时时间</span>       <span class="token comment">//      3、任务执行间隔 4、间隔时间单位</span>       service<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task ScheduledExecutorService "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4、Spring Task：Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多。</p></blockquote><p>demo 实现：</p><p>（1）、Pom.xml依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）、创建任务类：在主类上使用@EnableScheduling注解开启对定时任务的支持，然后启动项目。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/5 * * * * *"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====&gt;&gt;&gt;&gt;&gt;使用cron  {}"</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduled1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedRate{}"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduled2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====&gt;&gt;&gt;&gt;&gt;fixedDelay{}"</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>推荐：Spring快速开启计划。可以看到三个定时任务都已经执行，并且使同一个线程中串行执行，如果只有一个定时任务，这样做肯定没问题，当定时任务增多，如果一个任务卡死，会导致其他任务也无法执行。</p></blockquote><p><a href="https://juejin.im/post/5ca24fb1e51d454a490a4809">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 定时任务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Date </tag>
            
            <tag> Spring </tag>
            
            <tag> Job </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git上传代码至GitHub仓库</title>
      <link href="/MyBlog/first-git/"/>
      <url>/MyBlog/first-git/</url>
      
        <content type="html"><![CDATA[<p>写在前面：看到这个标题，我想有很多没有接触过Git的大佬们肯定也是一知半解，所以我还是先来讲讲Git与GitHub的区别。之前在某个帖子上面看见那位大佬是这么总结的：git是弓，你的代码是箭，而GitHub则是靶子。我只能说两个字：精辟！哈哈！言归正传，到底什么是Git什么是GitHub呢？</p><h2 id="Git-版本控制"><a href="#Git-版本控制" class="headerlink" title="Git 版本控制"></a>Git 版本控制</h2><p>git是用于Linux内核开发的版本控制工具。与常用的版本控制工具：CVS,SVN(SubVersion)等不同，它采用了分布式版本库的方式，不必服务器端软件支持（这要分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。）使源代码的发布和交流及其方便。Git的速度很快这对于诸如Linux kernel这样的大项目来说自然很重要。Git最为出色的是它的合并跟踪（merge tracing）能力。</p><p>我们都知道集中式版本控制系统是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，很显然这种等待是非常痛苦的。分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？</p><p>比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>而 Git 的正常使用都由一些友好的脚本命令来执行，使 Git 变得非常好用，即使是用来管理我们自己的开发项目也是一个很好的选择。</p><h2 id="GitHub-托管"><a href="#GitHub-托管" class="headerlink" title="GitHub 托管"></a>GitHub 托管</h2><p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持 git 作为唯一的版本库格式进行托管故名gitHub。 </p><p>如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份复制出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。GitHub可以托管各种git库，并提供一个web界面，但与其它像 SourceForge或Google Code这样的服务不同，GitHub的独特卖点在于从另外一个项目进行分支的简易性。</p><p>为一个项目贡献代码非常简单：首先点击项目站点的“fork”的按钮，然后将代码检出并将修改加入到刚才分出的代码库中，最后通过内建的“pull request”机制向项目负责人申请代码合并。已经有人将GitHub称为代码玩家的MySpace。在GitHub进行分支就像在Myspace（或Facebook…）进行交友一样，在社会关系图的节点中不断的连线。GitHub项目本身自然而然的也在GitHub上进行托管，只不过在一个私有的，公共视图不可见的库中。</p><p>开源项目可以免费托管，但私有库则并不如此。Chris Wanstrath，GitHub的开发者之一，肯定了通过付费的私有库来在财务上支持免费库的托管这一计划。通过与客户的接洽，开发FamSpam，甚至是开发GitHub本身，GitHub的私有库已经被证明了物有所值。任何希望节省时间并希望和团队其它成员一样远离页面频繁转换之苦的人士都会从GitHub中获得他们真正想要的价值。在GitHub，用户可以十分轻易地找到海量的开源代码。</p><p>说完Git与GitHub的区别我们开始步入正题，使用git上传代码至GitHub仓库。</p><h2 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h2><h3 id="要使用Git的前提当然得是你的本地安装了Git"><a href="#要使用Git的前提当然得是你的本地安装了Git" class="headerlink" title="要使用Git的前提当然得是你的本地安装了Git"></a>要使用Git的前提当然得是你的本地安装了Git</h3><pre class="line-numbers language-none"><code class="language-none">安装Git：1、进入Git官网 https://git-scm.com/2、下载对应版本根据引导安装Git即可3、安装完成之后执行 git --version 命令检验是否安装成功4、安装后随处右键会出现这两个目录：Git GUI Here、Git Bash Here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拥有自己的GitHub仓库"><a href="#拥有自己的GitHub仓库" class="headerlink" title="拥有自己的GitHub仓库"></a>拥有自己的GitHub仓库</h3><pre class="line-numbers language-none"><code class="language-none">1、进入GitHub官网 https://github.com/ 注册自己的GitHub账号2、在GitHub中新建一个自己的仓库 NEW Repositories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="上传代码到GitHub"><a href="#上传代码到GitHub" class="headerlink" title="上传代码到GitHub"></a>上传代码到GitHub</h2><h3 id="1、要上传的项目代码"><a href="#1、要上传的项目代码" class="headerlink" title="1、要上传的项目代码"></a>1、要上传的项目代码</h3><h3 id="2、生成SSH密钥"><a href="#2、生成SSH密钥" class="headerlink" title="2、生成SSH密钥"></a>2、生成SSH密钥</h3><pre class="line-numbers language-none"><code class="language-none">在项目的根目录打开 Git Bash Here 执行一下命令在执行命令之前可以先检验一下之前是否有配置：git config user.namegit config user.email如果没有配置就配置一下：git config –global user.name '你的用户名' git config –global user.email '你的邮箱地址'生成密钥：ssh-keygen -t rsa -C '你的邮箱地址'用户名和密码可以自己输，地址可以使用默认的（也可以直接三个回车）密钥默认地址在 C:\用户\你电脑的用户名\.ssh 下面id_rsa（私有秘钥）和id_rsa.pub（公有密钥）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、将生成的SSH密钥连接上GitHub"><a href="#3、将生成的SSH密钥连接上GitHub" class="headerlink" title="3、将生成的SSH密钥连接上GitHub"></a>3、将生成的SSH密钥连接上GitHub</h3><pre class="line-numbers language-none"><code class="language-none">1、登录GitHub进入Settings2、进入SSH and GPG keys3、创建New SSH key4、粘贴你的密钥到你key输入框中，标题可以设置属于自己的标题方便查看5、点击Add SSH key6、最后在Git Bash Here 中输入 ssh -T git@github.com 命令测试。出现以下信息就ok啦！Hi 007leisuping! You've successfully authenticated, but GitHub does not provide s hell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有生成SSH密钥连接GitHub，在推送代码至GitHub上时会提示你需要生成SSH才能够推送代码。</p><h3 id="4、执行Git命令上传代码"><a href="#4、执行Git命令上传代码" class="headerlink" title="4、执行Git命令上传代码"></a>4、执行Git命令上传代码</h3><pre class="line-numbers language-none"><code class="language-none">首次上传项目步骤：第一步： cd到你的本地项目根目录下，初始化Git项目git init第二步：将项目的所有文件添加到仓库中，进入待提交状态git add .如果想添加某个特定的文件，只需把换成特定的文件名即可第三步：将待提交的文件commit到仓库git commit -m "提交版本信息"第四步：将本地的项目关联GitHub上（仅用于未关联GitHub仓库的情况下）git remote add origin GitHub仓库的地址网址格式：git@github.com: + 用户名/ 远程仓库名（SSH形式的）第五步：上传GitHub之前最好先pull一下git pull origin master第六步：上传代码到GitHub远程仓库git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后的代码更新可根据实际情况执行Git命令即可如：<br>这里如果仓库地址需要更改可执行下面的语句<br>git remote set-url origin 你的ssh</p><p>git pull</p><p>git add .</p><p>git commit -m ‘提交版本信息’</p><p>git push</p><p>……</p><p><a href="https://www.runoob.com/git/git-basic-operations.html">Git常用命令</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 代码管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老板让你抗住千万级流量，你如何做架构系统设计？</title>
      <link href="/MyBlog/first-blog/"/>
      <url>/MyBlog/first-blog/</url>
      
        <content type="html"><![CDATA[<p> 随着互联网的发展，各项软件的客户量日益增多，当客户量达到一定峰值时，当数以万计的流量来临时，程序的顺利运行以及即时响应则显得尤为重要，就像双11那天的淘宝一样。那么，如何设计架构才能够抗住这千万级的流量呢？</p><p> 首先，要在我们架构设计的时候建立一些原则.</p><h2 id="1、实现高并发"><a href="#1、实现高并发" class="headerlink" title="1、实现高并发"></a>1、实现高并发</h2><pre class="line-numbers language-none"><code class="language-none">服务器拆分：将整个项目拆分成多个子项目或者模块，分而治之，将项目进行水平扩展服务化：解决服务调用复杂之后的服务的注册发现问题消息队列：解耦、异步处理缓存：各种缓存带来的并发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、实现高可用-集群、限流、降级"><a href="#2、实现高可用-集群、限流、降级" class="headerlink" title="2、实现高可用(集群、限流、降级)"></a>2、实现高可用(集群、限流、降级)</h2><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><h4 id="集群与分布式：分布式和集群都是需要有很多节点服务器通过网络协同工作完成整体的任务目标"><a href="#集群与分布式：分布式和集群都是需要有很多节点服务器通过网络协同工作完成整体的任务目标" class="headerlink" title="集群与分布式：分布式和集群都是需要有很多节点服务器通过网络协同工作完成整体的任务目标"></a>集群与分布式：分布式和集群都是需要有很多节点服务器通过网络协同工作完成整体的任务目标</h4><pre class="line-numbers language-none"><code class="language-none">集群的两个特点：1、可扩展性：集群的性能不限制于单一的服务实体，新的服务实体可以动态的添加到集群，从而增强集群的性能。2、高可用性：集群当其中一个节点发生故障时，这台节点上面所运行的应用程序将在另一台节点被自动接管，消除单点故障对于增强数据可用性、可达性和可靠性是非常重要的。集群的两大能力1、负载均衡：负载均衡把任务比较均匀的分布到集群环境下的计算和网络资源，以提高数据吞吐量。2、错误恢复：如果集群中的某一台服务器由于故障或者维护需要无法使用，资源和应用程序将转移到可用的集群节点上。这种由于某个节点的资源不能工作，另一个可用节点中的资源能够透明的接管并继续完成任务的过程，叫做错误恢复。负载均衡和错误恢复要求各服务实体中有执行同一任务的资源存在，而且对于同一任务的各个资源来说，执行任务所需的信息视图必须是相同的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20180826163836169?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjE4MzMzNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="每个人都有不同的分工，一起协作干一件事，叫做分布式。"></p><p><img src="https://img-blog.csdn.net/20180826163853698?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjE4MzMzNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="每个划桨人干的都是一样的活，叫做集群"></p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><pre class="line-numbers language-none"><code class="language-none">限流的目的限流的目的是通过对并发访问/请求进行限速或者一个时间窗口内的请求进行限速来保护系统的可用性，一旦达到限制速率就可以拒绝服务。就像手机预售一样，假如要卖出3万台，只需要接收3万用户的请求就可以，其他的用户请求可以选择过滤，可以提示"当前服务器过忙，请稍后再试"的提示。推荐大家看这篇文章：接口限流算法：漏桶算法&amp;令牌桶算法。限流方式：1. 限制瞬时并发数 ： 比如在入口层（nginx添加nginx_http_limit_conn_module）来限制同一个ip来源的连接数，防止恶意攻击访问的情况。2. 限制总并发数：通过配置数据库连接池、线程池大小来约束总并发数3. 限制时间窗口内的平均速率：在接口层面，通过限制访问速率来控制接口的并发请求。4. 其他方式：限制远程接口的调用速率、限制MQ的消费速率。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、业务设计"><a href="#3、业务设计" class="headerlink" title="3、业务设计"></a>3、业务设计</h2><pre class="line-numbers language-none"><code class="language-none">幂等：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用，就像数学里的数字1，多少次幂的结果都是1。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条。防重：防止同样的数据同时提交除了在业务方向判断和按钮点击之后不能继续点击的限制以外，在服务器端也可以做到防重：在服务器端生成一个唯一的随机标识号(Token&lt;令牌&gt;)同事在当前用户的Session域中保存这个令牌，然后将令牌发送到客户端的form表单中，在form表单中使用隐藏域来存储这个Token，表单提交的时候联通这个Token一起提交到服务器，然后在服务器端判断客户提交上来的Token与服务器端生成的Token是否一致，如果不一致，那就重复提交了，此时服务器端就可以不处理重复提交的表单，如果相同则处理表单，处理完后清当前用户的Session域中存储的标识号。高可用高并发架构参考：高可用高并发的 9 种技术架构。在下列情况中，服务器程序将拒绝处理用户提交的表单请求： 1）存储Session域中的Token与表单提交的Token不一致 2）当前用户的Session中不存在Token 3）用户提交的表单数据中没有Token。 状态机软件设计中的状态机概念，一般是指有限状态机（英语：finite-state machine，缩写：FSM）又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文档转至 ：<a href="https://mp.weixin.qq.com/s/N3YEAryyTGLiY2hmfID-Wg">https://mp.weixin.qq.com/s/N3YEAryyTGLiY2hmfID-Wg</a></p><p>该文档转至 ：<a href="https://blog.csdn.net/weixin_42183336/article/details/82081892">https://blog.csdn.net/weixin_42183336/article/details/82081892</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 服务端 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何压缩/解压Zip文件？</title>
      <link href="/MyBlog/file-zip/"/>
      <url>/MyBlog/file-zip/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java.util.zip包提供了用于读取和编写zip和gzip文件格式的类。在这篇文章中我们将学习如何使用java.util.zip.ZipInputStream和java.util.zip.ZipFile解压zip文件，如何以zip格式压缩文件和目录。</p></blockquote><blockquote><p>ZipInputStream - 此类用于按顺序读取zip条目。<br>ZipFile - 此类在内部使用随机访问文件来读取zip条目。<br>使用java.util.zip.ZipInputStream解压缩zip文件，ZipOutputStream类用于将zip格式的数据写入输出流，zip文件包含多个由ZipEntry类表示的条目。 </p></blockquote><p>示例一：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用java.util.zip.ZipInputStream解压缩zip文件</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yiibai<span class="token punctuation">.</span>tutorial<span class="token punctuation">.</span>io</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipEntry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipInputStream</span><span class="token punctuation">;</span><span class="token comment">/** * @author yiibai */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnzipFileExample1</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">File</span> zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Test.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">File</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Unzip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token class-name">ZipInputStream</span> zipInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>             zipInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Get ZipEntry ZipEntry entry = zipInputStream.getNextEntry(); </span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">// Create directory </span>                    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>output entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// Read zipEntry and write to a file. </span>                    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>output entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStre</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> i<span class="token punctuation">;</span>                     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> zipInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data <span class="token number">0</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token comment">// Get next entry </span>                entry <span class="token operator">=</span> zipInputStream<span class="token punctuation">.</span><span class="token function">getNextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>zipInputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> zipInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例二：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用java.util.zip.ZipFile解压缩zip文件</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yiibai<span class="token punctuation">.</span>tutorial<span class="token punctuation">.</span>io</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipEntry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipFile</span><span class="token punctuation">;</span><span class="token comment">/** * @author yiibai */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnzipFileExample2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">File</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Unzip2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ZipFile</span> zipFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Test.zip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Enumeration</span> entries <span class="token operator">=</span> zipFile<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ZipEntry</span><span class="token punctuation">)</span> entries<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// Create directory</span>                    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>output entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// Get zipEntry name and create an output stream. </span>                    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>output entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> zipFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Read Zip file entry </span>                    <span class="token keyword">int</span> i<span class="token punctuation">;</span>                     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data <span class="token number">0</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                    fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>zipFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     zipFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩文件的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yiibai<span class="token punctuation">.</span>tutorial<span class="token punctuation">.</span>io</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipEntry</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipOutputStream</span><span class="token punctuation">;</span> <span class="token comment">/** * @author yiibai */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipFileExample</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// Output zip file </span>        <span class="token class-name">File</span> zipfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"MyFile.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Input file to be compressed </span>        <span class="token class-name">File</span> inFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token class-name">ZipOutputStream</span> zipOutputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inFile<span class="token punctuation">)</span><span class="token punctuation">;</span>             fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipfile<span class="token punctuation">)</span><span class="token punctuation">;</span>             zipOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Create ZipEntry </span>            <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>inFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Set position of stream to the start of entry data zipOutputStream.putNextEntry(entry); </span>            <span class="token comment">// Write data to </span>            zipOutputStream <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> i<span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 zipOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data <span class="token number">0</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token comment">// Closes the current ZIP entry and positions the stream for writing </span>            <span class="token comment">// the next entry </span>            zipOutputStream<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>zipOutputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     zipOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩目录中的所有文件和子目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 以递归方式遍历目录中的所有文件，并使用ZipOutputStream将其写入zip文件。</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yiibai<span class="token punctuation">.</span>tutorial<span class="token punctuation">.</span>io</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipEntry</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipOutputStream</span><span class="token punctuation">;</span> <span class="token comment">/** * @author yiibai */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipDirectoryExample</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">File</span> zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"MyZip.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">File</span> directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/Work/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token class-name">ZipOutputStream</span> zipOutputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>             zipOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// Create zip file createZipFile(zipOutputStream directory directory.getAbsolutePath()); </span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>zipOutputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     zipOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token comment">/** * @param zipOutputStream * @param directory * @throws IOException */</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createZipFile</span><span class="token punctuation">(</span><span class="token class-name">ZipOutputStream</span> zipOutputStream <span class="token class-name">File</span> directory <span class="token class-name">String</span> zipEntryPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>         <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token function">createZipFile</span><span class="token punctuation">(</span>zipOutputStream file zipEntryPath<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// Create zipEntry </span>                <span class="token class-name">String</span> filePath <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>filePath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>zipEntryPath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// Set position of stream to the start of entry data zipOutputStream.putNextEntry(entry); </span>                <span class="token comment">// Write data to zip output stream </span>                <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token keyword">int</span> i<span class="token punctuation">;</span>                 <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     zipOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data <span class="token number">0</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token comment">// Closes the current ZIP entry zipOutputStream.closeEntry(); </span>                <span class="token comment">// Close file stream </span>                fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文出自<a href="https://www.yiibai.com/">易百教程</a> 原文链接：<br><a href="https://www.yiibai.com/geek/detail/447">https://www.yiibai.com/geek/detail/447</a><br><a href="https://www.yiibai.com/geek/detail/441">https://www.yiibai.com/geek/detail/441</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> IO </tag>
            
            <tag> ZIP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
